var myFingerprint = '';
var myUsername = '';

function logOut() {
	//if (confirm('If you want to use this identity again, please back up your private key first.\n\nRemove identity?')) {
		removeStoredKeys();
		//localStorage.setItem("signedout", 1);
	//}
}

function getUserFp() {
	var fingerprint = localStorage.getItem("fingerprint");
	if (fingerprint === null || fingerprint.length === 0) {
		return null;
	} else {
		return fingerprint;
	}
}

function getAvatar() {
	var myAvatar = localStorage.getItem("avatar");
	if (myAvatar === null || myAvatar.length === 0) {
		return null;
	} else {
		return myAvatar;
	}
}

if (getUserFp()) {
	var sp = document.getElementById('signAndPost');
	var actName = 'Post as ';
	if (!sp) {
		sp = document.getElementById('replySignedContainer');
		actName = 'Reply as ';
	}
	if (sp) {
		sp.innerHTML = '<button onclick="signMessage();">' + actName + getAvatar() + '</button>';
	}
}

function showHideForms() {
	// the private key form should always be visible, except while the page is loading
	var formPrivKey = document.getElementById('formprivkey');

	if (formPrivKey) {
		formPrivKey.style.display = 'block';
	} else {
		return;
	}

	if (getUserFp()) {
		var formCur = document.getElementById('formCurId');

		if (formCur) {
			formCur.style.display = 'block';
		}

		var formCreate = document.getElementById('formCreateId');

		if (formCreate) {
			formCreate.style.display = 'none';
		}

		var restoreIdButton = document.getElementById('restoreid');

		if (restoreIdButton) {
			restoreIdButton.disabled = true;
		}

		var copyPrivButton = document.getElementById('copypriv');

		if (copyPrivButton) {
			copyPrivButton.disabled = false;
		}

		//todo for both key textboxes
		//document.getElementById("myTextarea").readOnly = true;
	} else {
		var formCur = document.getElementById('formCurId');

		if (formCur) {
			formCur.style.display = 'none';
		}

		var formCreate = document.getElementById('formCreateId');

		if (formCreate) {
			formCreate.style.display = 'block';
		}

		var restoreIdButton = document.getElementById('restoreid');

		if (restoreIdButton) {
			restoreIdButton.disabled = false;
		}

		var copyPrivButton = document.getElementById('copypriv');

		if (copyPrivButton) {
			copyPrivButton.disabled = true;
		}
	}

	var loading = document.getElementById('loading');
	if (loading) {
		loading.style.display = 'none';
	}
}

showHideForms();

function removeStoredKeys() {
	window.localStorage.removeItem("privatekey");
	window.localStorage.removeItem("publickey");
	window.localStorage.removeItem("fingerprint");
	window.localStorage.removeItem("avatar");

	var textbox = document.getElementById("privatekey");

	if (textbox) {
		textbox.value = '';
	}

	textbox = document.getElementById("publickey");

	if (textbox) {
		textbox.value = '';
	}

	var avatar = document.getElementById("myid");

	if (avatar) {
		avatar.innerHTML = '';
	}

	avatar = document.getElementById("myAvatar");

	if (avatar) {
		avatar.innerHTML = '';
	}

	showHideForms();
}

var escapeTA = document.createElement('textarea');
function escapeHTML(html) {
	escapeTA.textContent = html;
	return escapeTA.innerHTML;
}

function unescapeHTML(html) {
	escapeTA.innerHTML = html;
	return escapeTA.textContent;
}

function fallbackCopyTextToClipboard(textareaId) {
  var textArea = document.getElementById(textareaId);
  textArea.focus();
  textArea.select();

  try {
	var successful = document.execCommand('copy');
	var msg = successful ? 'successful' : 'unsuccessful';
	console.log('Fallback: Copying text command was ' + msg);
  } catch (err) {
	console.error('Fallback: Oops, unable to copy', err);
  }
}

function copyTextToClipboard(textareaId) {
  var textbox = document.getElementById(textareaId);
  var text = textbox.value;

  if (!navigator.clipboard) {
	fallbackCopyTextToClipboard(textareaId);
	return;
  }
  navigator.clipboard.writeText(text).then(function() {
	console.log('Async: Copying to clipboard was successful!');
  }, function(err) {
	console.error('Async: Could not copy text: ', err);
  });
}

function getPrivateKey() {
	var privateKey = localStorage.getItem("privatekey");

	if (privateKey === null || privateKey.length === 0) {
		return null;
	} else {
		return privateKey;
	}
}

function insertPubKey() {
	var comment = document.getElementById("comment");
	if (comment) {
		var pubkey = getPublicKey();

		if (pubkey) {
			comment.value = pubkey;
		}
	}
}

function getPublicKey() {
	var publicKey = localStorage.getItem("publickey");
	if (publicKey === null || publicKey.length === 0) {
		return null;
	} else {
		return publicKey;
	}
}

function popId() {
	var pk = getPrivateKey();
	if (pk) {
		var textbox = document.getElementById("privatekey");

		if (textbox) {
			textbox.value = pk;
		}
	}

	var pubk = getPublicKey();
	if (pubk) {
		var textboxPub = document.getElementById("publickey");

		if (textboxPub) {
			textboxPub.value = pubk;
		}
	}

	if (pk) {
		saveId();
	}

	var nametext = document.getElementById("name");
	if (nametext) {
		if (nametext.value == '') {
			nametext.value = "Anonymous";
		}
	}

	var signedOut = localStorage.getItem("signedout");
	if (signedOut === null || signedOut.length === 0) {
	} else {
		if (!pk) {
			makeKeyFromInputs();
		}
	}

	showHideForms();
}

function setAvatar(avatar) {
	window.localStorage.setItem("avatar", avatar);
}

function hexToChar(string) {
	return string.replace(/0/gi,'~').replace(/1/gi,'@').replace(/2/gi,'#').replace(/3/gi,'$').replace(/4/gi,'%').replace(/5/gi,'^').replace(/6/gi,'&').replace(/7/gi,'*').replace(/8/gi,'+').replace(/9/gi,'=').replace(/a/gi,'>').replace(/b/gi,'<').replace(/c/gi,'|').replace(/d/gi,'}').replace(/e/gi,':').replace(/f/gi,'+');
}

function saveId() {
	var textbox = document.getElementById("privatekey");

	if (textbox) {
		var privkey = textbox.value;

		setPrivateKey(privkey);

		var openpgp = window.openpgp;

		openpgp.config.show_version = false;
		openpgp.config.show_comment = false;

		var privKeyObj = openpgp.key.readArmored(privkey);;

		var pubKeyObj = privKeyObj.keys[0].toPublic();

		var pubkey = pubKeyObj.armor();

		setPublicKey(pubkey);

		myFingerprint = pubKeyObj.primaryKey.keyid.toHex().toUpperCase();

		window.localStorage.setItem("avatar", avatar);
		window.localStorage.setItem("fingerprint", myFingerprint);

		myUsername = pubKeyObj.users[0].userId.userid;

		var color1 = myFingerprint.substr(0, 6);
		var color2 = myFingerprint.substr(3, 6);
		var color3 = myFingerprint.substr(6, 6);
		var color4 = myFingerprint.substr(9, 6);

		var avatar = '';

//		var char1 = myFingerprint.substr(12, 1);
//		var char2 = myFingerprint.substr(13, 1);
//		var char3 = myFingerprint.substr(14, 1);

		//char1 = hexToChar(char1);
		//char2 = hexToChar(char2);
		//char3 = hexToChar(char3);
		//char4 = hexToChar(char4);

		var char1 = '*';
		var char2 = '*';

		avatar = ''

			+ '<span class=avatar style="background-color: #' + color1 + '">'
			+ '<span class=icon>'
			+ '<font color="#' + color2 + '">' + char1 + '</font>'
			+ '<font color="#' + color3 + '">' + char2 + '</font>'
			//+ '<font color="#' + color4 + '">' + char3 + '</font>'
			+ '</span>'
			+ '<span class=username>' + escapeHTML(myUsername) + '</span>'
			+ '</span>';

		setAvatar(avatar);

		var myidBox = document.getElementById('myid');
		if (myidBox) {
			var myAvatar = localStorage.getItem('avatar');

			if (myAvatar === null || myAvatar.length === 0) {
				myidBox.innerHTML = '<a href="/identity.html">Sign In</a>';
			} else {
				var myFp = localStorage.getItem('fingerprint');
				myidBox.innerHTML = '<a class=avatar href="/author/' + myFp + '">' + myAvatar + '</a>' + ' <a href="/identity.html">Settings</a>';
			}
		}

		var myId2 = document.getElementById('myId2');
		if (myId2) {
			myId2.innerHTML = getAvatar();
		}

		var myAlgo = document.getElementById('myAlgo');
		if (myAlgo) {
			myAlgo.innerHTML = pubKeyObj.primaryKey.algorithm.toString();
		}

		var myCrea = document.getElementById('myCrea');
		if (myCrea) {
			myCrea.innerHTML = pubKeyObj.primaryKey.created.toString();
		}

		var myFinger = document.getElementById('myFP');
		if (myFinger) {
			myFinger.innerHTML = pubKeyObj.primaryKey.keyid.toHex().toUpperCase();
		}

		showHideForms();
	}
}

function setPrivateKey(privateKey) {
	window.localStorage.setItem("privatekey", privateKey);
}

function setPublicKey(publicKey) {
	window.localStorage.setItem("publickey", publicKey);
}

function getPublicKeyFromPrivateKey(privateKey) {
	var openpgp = window.openpgp;
	openpgp.initWorker({path:'openpgp.worker.js'});

	var privKeyObj = openpgp.key.readArmored(privateKey).keys[0];
}

function makePrivateKey(username, bits) {
	if (typeof(Storage) !== "undefined") {
		var privateKey = getPrivateKey();

		if (privateKey === null || privateKey.length === 0) {
			var privkey;
			var pubkey;

			var openpgp = window.openpgp;
			openpgp.initWorker({path:'openpgp.worker.js'});

			var options;
			if (bits == 512 || bits == 1024 || bits == 2048 || bits == 4096) {
				options = {
					userIds: [{ name: username }],
					numBits: bits,
					passphrase: ''
				};
			} else {
				options = {
					userIds: [{ name: username }],
					curve: bits,
					passphrase: ''
				};
			}

			var textbox = document.getElementById("privatekey");
			if (textbox) {
				textbox.value = 'Generating key, please wait...';
			}

			openpgp.config.show_version = false;
			openpgp.config.show_comment = false;

			//var statusBox = document.getElementById('status');
			var startDate = new Date();
			//statusBox.value = statusBox.value + "\n" + "Generating key..."

			openpgp.generateKey(options).then(
				function(key) {
					setPrivateKey(key.privateKeyArmored);
					if (textbox) {
						textbox.value = key.privateKeyArmored;
					}

					setPublicKey(key.publicKeyArmored);

					saveId();

					var cbMakeProfile = document.getElementById('pubNewProfile');
					if (cbMakeProfile) {
						if (cbMakeProfile.checked) {
							var a = document.createElement('iframe');
							a.src = "/write.html#inspubkey";
							a.width = "50";
							a.height = "50";
							document.getElementById('profIframe').appendChild(a)
						}
					}


					var endDate = new Date();
				}
			);
		} else {
			// key already exists in storage
		}
	} else {
		// sorry, your browser does not support Web Storage...
	}
}

function makeKeyFromInputs() {
	var privkey = getPrivateKey();

	if (privkey) {
		removeStoredKeys();
	}

	var user = document.getElementById('name').value;
	var bits = document.getElementById('bits').value;

	makePrivateKey(user, bits);
}

function insPubKey() {
	var pubkey = getPublicKey();

	if (pubkey) {
		var textbox = document.getElementById('comment');

		if (textbox) {
			if (pubkey) {
				textbox.value = pubkey;

				var composeForm = document.getElementById('compose');
				if (composeForm) {
					composeForm.submit();
				}
			}
		}
	}
}

function insVotes() {
	var vv = localStorage.getItem('vvvv');

	if (vv) {
		var textbox = document.getElementById('comment');

		if (textbox) {
			textbox.value = vv;
			localStorage.removeItem('vvvv');
		}
	}
}

function writeOnload() {
	if (window.location.hash) {
		if (window.location.hash == '#inspubkey') {
			insPubKey();
		}
		if (window.location.hash == '#insvotes') {
			insVotes();
		}
	}
}

function signForm(formId) {
	var form = document.getElementById(formId);
	if (form) {
		var elements = form.elements;

		for (var i=0, element; element = elements[i++];) {
			//alert(element.type);
			//alert(element.name);
			//alert(element.value);
		}

		//	var elements = document.getElementById("my-form").elements;
		//
		//    for (var i = 0, element; element = elements[i++];) {
		//        if (element.type === "text" && element.value === "")
		//            console.log("it's an empty textfield")
		//    }

		//function getFormElelemets(formName){
		//  var elements = document.forms[formName].elements;
		//  for (i=0; i<elements.length; i++){
		//    some code...
		//  }
		//}

		//document.getElementById("someFormId").elements;


		//document.forms["form_name"].getElementsByTagName("input");


	} else {
		return null;
	}
}

//signForm('compose');
//
//function signMessage2(message) {
//	var privkey = getPrivateKey();
//
//	if (privkey) {
//		var textbox = document.getElementById('comment');
//		var composeForm = document.getElementById('compose');
//
//		textbox.style.color = '#00ff00';
//		textbox.style.backgroundColor = '#c0c000';
//
//		if (textbox && composeForm) {
//			var message = textbox.value;
//
//			var privKeyObj = openpgp.key.readArmored(privkey).keys[0];
//
//			options = {
//				data: message,                             // input as String (or Uint8Array)
//				privateKeys: [privKeyObj]                  // for signing
//			};
//
//			openpgp.config.show_version = false;
//
//			openpgp.config.show_comment = false;
//
//			openpgp.sign(options).then(function(signed) {
//				textbox.value = signed.data;
//				composeForm.submit();
//			});
//		}
//	} else {
//		alert('No identity defined, cannot sign.');
//	}
//
//}

function signMessage() {
	var privkey = getPrivateKey();

	if (privkey) {
		var textbox = document.getElementById('comment');
		var composeForm = document.getElementById('compose');

		if (textbox && composeForm) {
			textbox.style.color = '#00ff00';
			textbox.style.backgroundColor = '#c0c000';

			var message = textbox.value;

			var privKeyObj = openpgp.key.readArmored(privkey).keys[0];

			options = {
				data: message,                             // input as String (or Uint8Array)
				privateKeys: [privKeyObj]                  // for signing
			};

			openpgp.config.show_version = false;

			openpgp.config.show_comment = false;

			openpgp.sign(options).then(function(signed) {
				textbox.value = signed.data;
				composeForm.submit();
			});
		}
	} else {
		alert('No identity defined, cannot sign.');
	}

}


//var statusBox = document.getElementById('status');
//if (statusBox) {
//	statusBox.value = statusBox.value + '\nReady!';
//}
