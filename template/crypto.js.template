var myFingerprint = '';
var myUsername = '';

function logOut() {
    if (confirm('If you want to use this identity again, please back up your private key first.\n\nRemove identity?')) {
        removeStoredKeys();
    }
}

function removeStoredKeys() {
    window.localStorage.removeItem("privatekey");
    window.localStorage.removeItem("publickey");
    window.localStorage.removeItem("avatar");

    var textbox = document.getElementById("privatekey");

    if (textbox) {
        textbox.value = '';
    }

    textbox = document.getElementById("publickey");

    if (textbox) {
        textbox.value = '';
    }

    var avatar = document.getElementById("myid");

    if (avatar) {
        avatar.innerHTML = '';
    }

    avatar = document.getElementById("myAvatar");

    if (avatar) {
        avatar.innerHTML = '';
    }

    avatar = document.getElementById("myAvatar2");

    if (avatar) {
        avatar.innerHTML = '';
    }
}

function fallbackCopyTextToClipboard() {
  var textArea = document.getElementById('privatekey');
  textArea.focus();
  textArea.select();

  try {
    var successful = document.execCommand('copy');
    var msg = successful ? 'successful' : 'unsuccessful';
    console.log('Fallback: Copying text command was ' + msg);
  } catch (err) {
    console.error('Fallback: Oops, unable to copy', err);
  }
}

function copyTextToClipboard() {
  var text = document.getElementById('privatekey').value;
  if (!navigator.clipboard) {
    fallbackCopyTextToClipboard(text);
    return;
  }
  navigator.clipboard.writeText(text).then(function() {
    console.log('Async: Copying to clipboard was successful!');
  }, function(err) {
    console.error('Async: Could not copy text: ', err);
  });
}

function getPrivateKey() {
	var privateKey = localStorage.getItem("privatekey");

	if (privateKey === null || privateKey.length === 0) {
		return null;
	} else {
		return privateKey;
	}
}

function insertPubKey() {
    var comment = document.getElementById("comment");
    if (comment) {
        var pubkey = getPublicKey();

        if (pubkey) {
            comment.value = pubkey;
        }
    }
}

function getPublicKey() {
    var publicKey = localStorage.getItem("publickey");
    if (publicKey === null || publicKey.length === 0) {
        return null;
    } else {
        return publicKey;
    }
}

function popId() {
	var pk = getPrivateKey();
	if (pk) {
		var textbox = document.getElementById("privatekey");

		if (textbox) {
			textbox.value = pk;
		}
	}

	var pubk = getPublicKey();
	if (pubk) {
		var textboxPub = document.getElementById("publickey");

		if (textboxPub) {
			textboxPub.value = pubk;
		}
	}

	if (pk) {
		saveId();
	}

	var nametext = document.getElementById("name");
	if (nametext) {
		if (nametext.value == '') {
			nametext.value = "Anonymous";
		}
	}
}

function getAvatar() {
    var avatar = localStorage.getItem("avatar");
    if (avatar === null || avatar.length === 0) {
        return null;
    } else {
        return avatar;
    }
}
function setAvatar(avatar) {
    window.localStorage.setItem("avatar", avatar);
}

function saveId() {
    var textbox = document.getElementById("privatekey");

    if (textbox) {
			var privkey = textbox.value;

			setPrivateKey(privkey);

			var openpgp = window.openpgp;

			openpgp.config.show_version = false;
			openpgp.config.show_comment = false;

			var privKeyObj = openpgp.key.readArmored(privkey);;

			var pubKeyObj = privKeyObj.keys[0].toPublic();

			var pubkey = pubKeyObj.armor();

			setPublicKey(pubkey);

			var pubTextbox = document.getElementById("publickey");

			if (pubTextbox) {
				pubTextbox.value = pubkey;
			}

			myFingerprint = pubKeyObj.primaryKey.keyid.toHex().toUpperCase();

			myUsername = pubKeyObj.users[0].userId.userid;

			var color1 = myFingerprint.substr(0, 6);
			var color2 = myFingerprint.substr(3, 6);
			var color3 = myFingerprint.substr(7, 6);

			var avatar = '';

			avatar = avatar + '<span class=avatar style="border: 1pt dotted #' + color1 + ';">';
			avatar = avatar + '<span class=icon style="background-color: ' + color1 +'"><font color="#' + color2 + '">&bull;</font>';
			avatar = avatar + '<font color="#' + color3 + '">&bull;</font></span><span class=username>' + window.myUsername + '</span></span>';

			setAvatar('<a href="/author/' + window.myFingerprint.toString() + '/">' + avatar + '</a>');
			//setAvatar(avatar);

			var myidBox = document.getElementById('myid');
			if (myidBox) {
				myidBox.innerHTML = getAvatar() + ' ' + '<a href="/identity.html">[&gt;]</a>';
			}

			var myAvatar = document.getElementById('myAvatar');
			if (myAvatar) {
				myAvatar.innerHTML = getAvatar();
			}
			myAvatar = document.getElementById('myAvatar2');
			if (myAvatar) {
				myAvatar.innerHTML = getAvatar();
			}
    }
}

function pushMessage(message) {
	var ul = document.getElementById("messages");
	if (ul) {
		var li = document.createElement("li");
		li.appendChild(document.createTextNode(message));
		ul.appendChild(li);
	}
}



//
//function getIdFingerprint() {
//	var privkey = getPrivateKey();
//
//	var privKeyObj = openpgp.key.readArmored(privkey);;
//
//	var pubKeyObj = privKeyObj.keys[0].toPublic();
//
//	var fingerprint = pubKeyObj.primaryKey.fingerprint;
//
//	return fingerprint;
//}

function setPrivateKey(privateKey) {
    window.localStorage.setItem("privatekey", privateKey);
}

function setPublicKey(publicKey) {
    window.localStorage.setItem("publickey", publicKey);
}

function getPublicKeyFromPrivateKey(privateKey) {
	var openpgp = window.openpgp;
	openpgp.initWorker({path:'openpgp.worker.js'});

	var privKeyObj = openpgp.key.readArmored(privateKey).keys[0];
}

function makePrivateKey(username, bits) {
    if (typeof(Storage) !== "undefined") {
        var privateKey = getPrivateKey();

        if (privateKey === null || privateKey.length === 0) {
            var privkey;
            var pubkey;

            var openpgp = window.openpgp;
            openpgp.initWorker({path:'openpgp.worker.js'});

            var options = {
                userIds: [{ name: username }],
                numBits: bits,
                passphrase: ''
            };

            var textbox = document.getElementById("privatekey");
            if (textbox) {
                textbox.value = 'Generating key, please wait...';
            }

            var pubTextbox = document.getElementById("publickey");
            if (pubTextbox) {
                pubTextbox.value = "Generating key, please wait...";
            }

            openpgp.config.show_version = false;
            openpgp.config.show_comment = false;

            var statusBox = document.getElementById('status');
            var startDate = new Date();
            statusBox.value = statusBox.value + "\n" + "Generating key..."

            openpgp.generateKey(options).then(
                function(key) {
                    setPrivateKey(key.privateKeyArmored);
                    if (textbox) {
                        textbox.value = key.privateKeyArmored;
                    }

                    setPublicKey(key.publicKeyArmored);

                    if (pubTextbox) {
                        pubTextbox.value = key.publicKeyArmored;
                    }

                    saveId();

							var endDate = new Date();

                    statusBox.value = statusBox.value + "\n" + "Finished! " + (endDate.getTime() - startDate.getTime()) + "ms";
                }
            );
        } else {
            // key already exists in storage
        }
    } else {
        // sorry, your browser does not support Web Storage...
    }
}

function makeKeyFromInputs() {
    var privkey = getPrivateKey();

    if (privkey) {
        var sure = confirm('Another identity already exists. Overwrite?');

        if (sure == true) {
            removeStoredKeys();
        } else {
            return;
        }
    }

    var user = document.getElementById('name').value;
    var bits = document.getElementById('bits').value;

    makePrivateKey(user, bits);
}

function insPubKey() {
    var pubkey = getPublicKey();

    if (pubkey) {
        var textbox = document.getElementById('comment');

        if (textbox) {
            if (pubkey) {
                textbox.value = pubkey;

					var composeForm = document.getElementById('compose');
					if (composeForm) {
							composeForm.submit();
					}

            }
        }
    }
}

function writeOnload() {
    if (window.location.hash) {
        if (window.location.hash == '#inspubkey') {
            insPubKey();
        }
    }
}

function signMessage() {
    var privkey = getPrivateKey();

    if (privkey) {
        var textbox = document.getElementById('comment');
        var composeForm = document.getElementById('compose');

        if (textbox && composeForm) {
            var message = textbox.value;

            var privKeyObj = openpgp.key.readArmored(privkey).keys[0];

            options = {
                data: message,                             // input as String (or Uint8Array)
                privateKeys: [privKeyObj]                  // for signing
            };

            openpgp.config.show_version = false;
            openpgp.config.show_comment = false;

            openpgp.sign(options).then(function(signed) {
                textbox.value = signed.data;
                composeForm.submit();
            });
        }
    } else {
        alert('No identity defined, cannot sign.');
    }

}

var myidBox = document.getElementById('myid');
if (myidBox) {
	if (getAvatar()) {
		myidBox.innerHTML = getAvatar() + ' ' + '<a href="/identity.html">[&gt;]</a>';
//		var ssc = document.getElementById('signSmallContainer');
//		if (ssc) {
//			ssc.innerHTML = '<input type=submit id=signSmall value="Sign and Send" onclick="signMessage();">';
//		}
		var sp = document.getElementById('signAndPost');
		if (sp) {
			//sp.innerHTML = '<input type=button value="Sign and Post" onclick="signMessage();">';
			sp.innerHTML = '<button onclick="signMessage();">Post as ' + getAvatar() + '</button>';
		}
	} else {
		myidBox.innerHTML = '<a href="/identity.html">Identity</a>'
	}
}

var statusBox = document.getElementById('status');
if (statusBox) {
	statusBox.value = statusBox.value + '\nReady!';
}