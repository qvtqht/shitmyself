function logOut() {
    if (confirm('If you want to use this identity again, please back up your private key first.\n\nRemove identity?')) {
        window.localStorage.removeItem('privatekey');
        window.localStorage.removeItem('password');
    }
}

function getPrivateKey() {
    var privateKey = localStorage.getItem('privatekey');

    if (privateKey === null || privateKey.length === 0) {
        return null;
    } else {
        return privateKey;
    }
}

function getPassword() {
    var privateKey = localStorage.getItem('password');

    if (privateKey === null || privateKey.length === 0) {
        return null;
    } else {
        return privateKey;
    }
}

function setPrivateKey(privateKey, password) {
    window.localStorage.setItem("privatekey", key.privateKeyArmored);
    window.localStorage.setItem("password", password);

}

function makePrivateKey(username, password) {
    if (typeof(Storage) !== "undefined") {
        var privateKey = getPrivateKey();

        if (privateKey === null || privateKey.length === 0) {
            var privkey;
            var pubkey;

            var openpgp = window.openpgp;
            openpgp.initWorker({path:'openpgp.worker.js'});

            var options = {
                userIds: [{ name: username }],
                numBits: 4096,
                passphrase: password
            };

            var textbox = document.getElementById('privatekey');
            if (textbox) {
                textbox.value = 'Generating key...';
            }

            openpgp.generateKey(options).then(
                function(key) {
                    //setPrivateKey(key.privateKeyArmored, password);
                    if (textbox) {
                        textbox.value = key.privateKeyArmored;
                    }
                }
            );

        } else {
            // key already exists in storage
        }
    } else {
        // sorry, your browser does not support Web Storage...
    }
}

function makeKeyFromInputs() {
    var user = document.getElementById('name').value;
    var pass = document.getElementById('pass').value;

    makePrivateKey(user, pass);
}

function signMessage(message) {
    var privkey = getPrivateKey();

    var passphrase = getPassword();

    var privKeyObj = openpgp.key.readArmored(privkey).keys[0];
    privKeyObj.decrypt(passphrase);

    options = {
        data: message,                             // input as String (or Uint8Array)
        privateKeys: [privKeyObj]                          // for signing
    };

    openpgp.sign(options).then(function(signed) {
        cleartext = signed.data;
    });


}
