function logOut() {
    if (confirm('If you want to use this identity again, please back up your private key first.\n\nRemove identity?')) {
        window.localStorage.removeItem('privatekey');

        var textbox = document.getElementById('privatekey');

        if (textbox) {
            textbox.value = '';
        }
    }
}

function getPrivateKey() {
    var privateKey = localStorage.getItem('privatekey');

    if (privateKey === null || privateKey.length === 0) {
        return null;
    } else {
        return privateKey;
    }
}

function insertPubKey() {
    var comment = document.getElementById('comment');
    if (comment) {
        var pubkey = getPublicKey();

        if (pubkey) {
            comment.value = pubkey;
        }
    }
}

function getPublicKey() {
    var publicKey = localStorage.getItem('publickey');
    if (publicKey === null || publicKey.length === 0) {
        return null;
    } else {
        return publicKey;
    }
}

function popId() {
    var pk = getPrivateKey();
    if (pk) {
        var textbox = document.getElementById('privatekey');

        if (textbox) {
            textbox.value = pk;
        }
    }

    var nametext = document.getElementById('name');
    if (nametext) {
        if (nametext.value == '') {
            nametext.value = 'Anonymous';
        }
    }
}

function saveId() {
    var textbox = document.getElementById('privatekey');

    if (textbox) {
        setPrivateKey(textbox.value);
    }
}

function getPassword() {
    var password = localStorage.getItem('password');

    if (password === null || password.length === 0) {
        password = prompt('Please enter passphrase');
    } else {
        return password;
    }
}

function setPrivateKey(privateKey) {
    window.localStorage.setItem("privatekey", privateKey);
}

function setPublicKey(publicKey) {
    window.localStorage.setItem("publickey", publicKey);
}

function shareId() {
    alert();
}

function makePrivateKey(username, password) {
    if (typeof(Storage) !== "undefined") {
        var privateKey = getPrivateKey();

        if (privateKey === null || privateKey.length === 0) {
            var privkey;
            var pubkey;

            var openpgp = window.openpgp;
            openpgp.initWorker({path:'openpgp.worker.js'});

            var options = {
                userIds: [{ name: username }],
                numBits: 4096,
                passphrase: password
            };

            var textbox = document.getElementById('privatekey');
            if (textbox) {
                textbox.value = 'Generating key, please wait...';
            }

            openpgp.generateKey(options).then(
                function(key) {
                    setPrivateKey(key.privateKeyArmored);
                    if (textbox) {
                        textbox.value = key.privateKeyArmored;
                    }
                }
            );

        } else {
            // key already exists in storage
        }
    } else {
        // sorry, your browser does not support Web Storage...
    }
}

function makeKeyFromInputs() {
    var user = document.getElementById('name').value;
    var pass = document.getElementById('pass').value;

    makePrivateKey(user, pass);
}

function signMessage() {
    var privkey = getPrivateKey();

    if (privkey) {
        var textbox = document.getElementById('comment');
        if (textbox) {
            var message = textbox.value;

            var passphrase = '';

            var privKeyObj = openpgp.key.readArmored(privkey).keys[0];
            privKeyObj.decrypt(passphrase);

            options = {
                data: message,                             // input as String (or Uint8Array)
                privateKeys: [privKeyObj]                  // for signing
            };

            openpgp.sign(options).then(function(signed) {
                textbox.value = signed.data;
            });
        }
    } else {
        alert('No identity defined, cannot sign.');
    }

}
