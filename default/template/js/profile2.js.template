// begin profile2.js.template
//
//if (window.localStorage && window.Promise) {
//
//}

if (!window.openpgp && document.head && document.head.appendChild && document.getElementById && window.localStorage) {
	//alert('DEBUG: loading openpgp.js');

	var script = document.createElement('script');
	script.src = '/openpgp.js';
	script.async = false; // This is required for synchronous execution
	document.head.appendChild(script);

	//alert('DEBUG: finished loading openpgp.js; window.openpgp: ' + !!window.openpgp);
} else {
	//alert('DEBUG: not loading openpgp.js; window.openpgp: ' + !!window.openpgp + ' document.getElementById: ' + !!document.getElementById + ' window.localStorage: ' + !!window.localStorage + ' window.Promise: ' + !!window.Promise);
}


if (!window.MakeKey && document.head && document.head.appendChild && document.getElementById && window.localStorage) {
	//alert('DEBUG: loading crypto2.js');

	var script2 = document.createElement('script');
	script2.src = '/crypto2.js';
	script2.async = false; // This is required for synchronous execution
	document.head.appendChild(script2);

	//alert('DEBUG: finished loading crypto2.js; window.cryptoJs: ' + !!window.cryptoJs + '; document.getPrivateKey: ' + !!document.getPrivateKey + '; window.openpgp: ' + !!window.openpgp);
} else {
	//alert('DEBUG: not loading crypto2.js; ' + ' window.MakeKey = ' + window.MakeKey + '; document.getElementById = ' + document.getElementById + ' window.localStorage = ' + window.localStorage );
}

function btnSignout_Click(t) { // event for 'Sign Out' button's click
	//alert('DEBUG: btnSignout_Click begin');

	if (window.localStorage) {
		//alert('DEBUG: localStorage is true');

		var ls = window.localStorage;
		ls.removeItem('privatekey');
		ls.removeItem('publickey');
		ls.removeItem('fingerprint');
		ls.removeItem('avatar');

		SetPrefs('last_pubkey_ping', 0);
	}

	return true;
}

function btnRegister_Click(t) { // event for 'Register' button's click
// t is clicked button's "this" object
	//alert('DEBUG: btnRegister_Click() begin');

	if (window.localStorage) {
		// minimum features check
		// #todo resolve conflict with ie11 vs opera 12

		//alert('DEBUG: btnRegister_Click: localStorage and Promise feature check pass');

		if (window.MakeKey) {
			//alert('DEBUG: btnRegister_Click: window.MakeKey exists');

			var intKeyGenResult = MakeKey();

			//alert('DEBUG: btnRegister_Click: intKeyGenResult = ' + intKeyGenResult);

			SetPrefs('last_pubkey_ping', 0);

			return intKeyGenResult;
		}
	} else {
		return true;
	}

	return true;
}

function getUserFp() { // retrieve stored user fingerprint from localstorage
	//alert('DEBUG: getUserFp() begin');

	if (window.localStorage) {
		// localstorage mode
		var fingerprint = localStorage.getItem('fingerprint');
		if (fingerprint) {
			return fingerprint;
		}
	}

	// fallback to cookie mode
	var fingerprint = GetCookie('cookie');

	if (fingerprint) {
		return fingerprint;
	}

	// nothing found, we looked everywhere
	return null;
}

function sharePubKey() { // shares current user's public key via injected form and iframe
	//alert('DEBUG: profile2.js: sharePubKey() begins');

	var pubKey = getPublicKey();

	//alert('DEBUG: sharePubKey: pubKey = ' + (pubKey ? pubKey : '(false)'));

	if (pubKey) {
//		//alert('DEBUG: sharePubKey: creating iframe');
//
//		var ifrSharePubKey = document.createElement('iframe'); //#todo pre-iframe browsers
//		ifrSharePubKey.setAttribute("name", "ifrSharePubKey");
//	//	ifrSharePubKey.setAttribute("height", "11");
//	//	ifrSharePubKey.setAttribute("width", "11");
//		// #todo pre-createElement browsers
//		document.body.appendChild(ifrSharePubKey);

		//alert('DEBUG: sharePubKey: creating form');

		var form = document.createElement('form');
		form.setAttribute("action", "/post.html");
		form.setAttribute("method", "get");
		//form.setAttribute("target", "ifrSharePubKey");

		//alert('DEBUG: sharePubKey: creating input');

		var txtComment = document.createElement('input');
		txtComment.setAttribute("type", "hidden");
		txtComment.setAttribute("value", pubKey);
		txtComment.setAttribute("name", "comment");

		//alert('DEBUG: sharePubKey: adding txtComment to form');

		form.appendChild(txtComment);

		//alert('DEBUG: sharePubKey: adding form to body');

		//document.getElementsByTagName('body')[0].appendChild(form);

		document.body.appendChild(form);

		//alert('DEBUG: submitting form');

		form.submit();

		return false;
	} else {
		//alert('DEBUG: pubKey was FALSE');

		return true;
	}

/////
//	window.open('/write.html#inspubkey', '_self');

/////
//	var iframe = document.createElement("iframe");
//	iframe.src = '/write.html#inspubkey';
//	iframe.name = "inspubkey"
//	iframe.style.display = 'none';
//	document.body.appendChild(iframe);

	//return 0;
}

function AddPrivateKeyLinks() { // adds save/load links to profile page if features are available
// #todo make it so that this can be called repeatedly and hide/show appropriate links

	//alert('DEBUG: AddPrivateKeyLinks() begin');

	if (document.getElementById && window.getPrivateKey) {
		var privateKey = getPrivateKey();
		var fieldset = document.getElementById('fldRegistration');

		if (fieldset && document.createElement) {
			// file selector (hidden, activated by [load from file] link

			//alert('DEBUG: AddPrivateKeyLinks: checks pass');

			//alert('DEBUG: AddPrivateKeyLinks: creating file input...');

			var fileLoadKeyFromText = document.createElement('input');
			fileLoadKeyFromText.setAttribute('type', 'file');
			fileLoadKeyFromText.setAttribute('accept', 'text/plain');
			fileLoadKeyFromText.setAttribute('onchange', 'if (window.openFile) { openFile(event) } else { alert("openFile missing"); }');
			fileLoadKeyFromText.setAttribute('style', 'display: none');
			fileLoadKeyFromText.setAttribute('id', 'fileLoadKeyFromText');

			//alert('DEBUG: AddPrivateKeyLinks: check for privateKey');

			if (privateKey) {
				//alert('DEBUG: AddPrivateKeyLinks: privateKey: true');

				// add horizontal rule
				var hrDivider = document.createElement('hr');
				fieldset.appendChild(hrDivider);

				// add [go to profile] link
				var pProfileLink = document.createElement('p');
				var aProfile = document.createElement('a');
				aProfile.setAttribute('href', '/author/' + getUserFp());
				aProfile.setAttribute('id', 'linkGoToProfile');
				aProfile.innerHTML = 'go to profile';
				pProfileLink.appendChild(aProfile);
				fieldset.appendChild(pProfileLink);

				// add [go to profile] link
				var pProfileShareLink = document.createElement('p');
				var aProfileShare = document.createElement('a');
				aProfileShare.setAttribute('href', '/write.html#inspubkey');
				aProfileShare.setAttribute('onclick', 'if (window.sharePubKey) { return sharePubKey(); }');
				aProfileShare.setAttribute('id', 'linkProfileShare');
				aProfileShare.innerHTML = 'create profile';
				pProfileShareLink.appendChild(aProfileShare);
				fieldset.appendChild(pProfileShareLink);

				// add horizontal rule
				var hrDivider = document.createElement('hr');
				fieldset.appendChild(hrDivider);

				// add [save as file] link
				var pSaveKeyAsTxt = document.createElement('p');
				var aSaveKeyAsTxt = document.createElement('a');
				aSaveKeyAsTxt.setAttribute('href', '#');
				aSaveKeyAsTxt.setAttribute('id', 'linkSavePrivateKey');
				aSaveKeyAsTxt.setAttribute('onclick', 'if (window.SavePrivateKeyAsTxt) { return SavePrivateKeyAsTxt(); }');
				aSaveKeyAsTxt.innerHTML = 'save as file';
				pSaveKeyAsTxt.appendChild(aSaveKeyAsTxt);
				fieldset.appendChild(pSaveKeyAsTxt);

				// add [show private key] link
				var pShowPrivateKey = document.createElement('p');
				var aShowPrivateKey = document.createElement('a');
				aShowPrivateKey.setAttribute('class', 'advanced');
				aShowPrivateKey.setAttribute('href', '#');
				aShowPrivateKey.setAttribute('id', 'linkShowPrivateKey');
				aShowPrivateKey.setAttribute('onclick', 'if (window.ShowPrivateKey) { return ShowPrivateKey(); }');
				aShowPrivateKey.innerHTML = 'show private key';
				pShowPrivateKey.appendChild(aShowPrivateKey);
				fieldset.appendChild(pShowPrivateKey);
			} else {
				//alert('DEBUG: AddPrivateKeyLinks: privateKey: false');

				var pLoadKeyFromTxt = document.createElement('p');

				// add [load from file] link
				var aLoadKeyFromText = document.createElement('a');
				aLoadKeyFromText.setAttribute('class', 'advanced');
				aLoadKeyFromText.setAttribute('href', '#');
				aLoadKeyFromText.setAttribute('id', 'linkLoadPrivateKey');
				aLoadKeyFromText.setAttribute('onclick', 'if (window.CallLoadPrivateKey) { return CallLoadPrivateKey(); }');
				aLoadKeyFromText.innerHTML = 'load from file';

				pLoadKeyFromTxt.appendChild(aLoadKeyFromText);
				pLoadKeyFromTxt.appendChild(fileLoadKeyFromText);

				fieldset.appendChild(pLoadKeyFromTxt);
			}
		}
	}
}

function ShowPrivateKey() { // displays private key in textarea
	//alert('DEBUG: ShowPrivateKey() begin');
	if (document.getElementById) {
		//alert('DEBUG: ShowPrivateKey: document.getElementById is true');

		var txtPrivateKey = document.getElementById('txtPrivateKey');
		if (txtPrivateKey) {
			//alert('DEBUG: ShowPrivateKey: txtPrivateKey is true');

			if (txtPrivateKey.style.display == 'none') {
				//alert('DEBUG: style is none, set to block');
				txtPrivateKey.style.display = 'block';
			} else {
				//alert('DEBUG: style is block, set to none');
				txtPrivateKey.style.display = 'none';
			}

			var linkShowPrivateKey = document.getElementById('linkShowPrivateKey');
			if (linkShowPrivateKey) {
				if (txtPrivateKey.style.display == 'none') {
					linkShowPrivateKey.innerHTML = 'show private key';
				} else {
					linkShowPrivateKey.innerHTML = 'hide private key';
				}
			}

			return false;
		}
	}

	if (window.getPrivateKey) {
		var privateKey = getPrivateKey();
		if (privateKey && document.createElement) {
			var txtPrivKey = document.createElement('textarea');
			txtPrivKey.setAttribute('cols', 80);
			txtPrivKey.setAttribute('rows', 24);
			txtPrivKey.setAttribute('id', 'txtPrivateKey');
			txtPrivKey.innerHTML = privateKey;

			var fldRegistration = document.getElementById('fldRegistration');
			if (fldRegistration) {
				fldRegistration.appendChild(txtPrivKey);
			} else {
				document.body.appendChild(txtPrivKey);
			}

			var linkShowPrivateKey = document.getElementById('linkShowPrivateKey');
			if (linkShowPrivateKey) {
				linkShowPrivateKey.innerHTML = 'hide private key';
			}

			txtPrivKey.focus();

			return false;
		}
	}
}

function openFile(event) {
	//alert('DEBUG: openFile() begin');

	var input = event.target;

	if (window.FileReader) {
		reader = new FileReader();

		// this eval is for hiding the "=function(){}" syntax from incompatible browsers
		// they shouldn't try to execute it because they don't make it here due to other tests
		eval('reader.onload = function() { var text = reader.result; LoadPrivateKeyFromTxt(text); }');
		reader.readAsText(input.files[0]);
	}
}


function LoadPrivateKeyFromTxt(text) {
	if (window.setPrivateKeyFromTxt) {
		setPrivateKeyFromTxt(text);
	}
}

function SavePrivateKeyAsTxt() {
	var myFp = getUserFp();
	var text = getPrivateKey();

	DownloadAsTxt(myFp + '.txt', text);
}

function CallLoadPrivateKey() {
	alert('DEBUG: CallLoadPrivateKey() begins');

	if (document.getElementById) {
		var fileLoadKeyFromText = document.getElementById('fileLoadKeyFromText');

		//alert('DEBUG: CallLoadPrivateKey: fileLoadKeyFromText: ' + !!fileLoadKeyFromText);

		if (fileLoadKeyFromText) {
			fileLoadKeyFromText.click();
		}
	}
}

if (document.cookie) {
	//alert('DEBUG: cookie=' + document.cookie);
} else {
	//alert('DEBUG: document.cookie missing');
	if (window.localStorage) {
		//alert('DEBUG: window.localStorage exists');
		var fp = localStorage.getItem('fingerprint');
		if (fp) {
			//alert('DEBUG: fp exists, setting cookie via js');
			document.cookie = 'test=' + fp;
		}
	}
}

function PubkeyCheckProfileExists(fp) { // PLACEHOLDER checks if profile exists
// PLACEHOLDER, ALWAYS RETURNS TRUE
	//alert('DEBUG: PubkeyCheckProfileExists() begin');

	//alert('DEBUG: PubkeyCheckProfileExists: fp = ' + fp);

	var profileUrl = '/author/' + fp + '/';

	//alert('DEBUG: profileUrl = ' + profileUrl);

	if (1) { //#todo
		//alert('DEBUG: lastPubkeyPing: profile exists');
		return true;
	} else {
		//alert('DEBUG: lastPubkeyPing: profile NOT FOUND');
		return false;
	}
}

function PubkeyPing() { // checks if user's public key is on server
// uploads it to server if it is missing
//
	//alert('DEBUG: PubKeyPing() begin');

	var lastPubkeyPing = GetPrefs('last_pubkey_ping');

	if (lastPubkeyPing && (time() < (lastPubkeyPing + 3600))) {
		//alert('DEBUG: PubkeyPing: lastPubkeyPing+10 = ' + (lastPubkeyPing+10) + ' < time() = ' + time());
	} else {
		//alert('DEBUG: PubkeyPing: lastPubkeyPing was false or stale, doing a check at ' + time());

		if (window.getUserFp) {
			//alert('DEBUG; PubkeyPing: window.getUserFp check passed');

			var myFingerprint = getUserFp();

			//alert('DEBUG: PubkeyPing: myFingerprint = ' + myFingerprint);

			if (myFingerprint) {
				if (0 && PubkeyCheckProfileExists(myFingerprint)) {
					//alert('DEBUG: PubkeyPing: profile already exists');
				} else {
					if (window.sharePubKey) {
						//alert('DEBUG: PubkeyPing: lastPubkeyPing: window.sharePubKey check passed, doing it...');

						if (document.getElementById) {
							var serverMessage = document.getElementById('serverMessage');
							if (serverMessage) {
								var hr = document.createElement('hr');
								serverMessage.appendChild(hr);

								var center = document.createElement('p');
								center.style.fontWeight = 'bold';
								center.style.textAlign = 'center';

								center.innerHTML = 'Please meditate while profile is created...';
								serverMessage.appendChild(center);
							}
						}

						sharePubKey();
					} else {
						//alert('DEBUG: PubkeyPing: lastPubkeyPing: window.sharePubKey check FAILED');
					}
				}
			} else {
				//alert('DEBUG: PubkeyPing: myFingerprint: false');
			}

			//alert('DEBUG: PubkeyPing: lastPubkeyPing check complete, saving time');

			lastPubkeyPing = time();
			SetPrefs('last_pubkey_ping', lastPubkeyPing);
		} else {
			//alert('DEBUG: PubkeyPing: window.getUserFp check FAILED');
		}
	}
}

function ProfileOnLoad() { // onload event for profile page
	//alert('DEBUG: ProfileOnLoad() begin');

	var lblSigningIndicator;
	if (document.getElementById) {
		//alert('DEBUG: ProfileOnLoad: document.getElementById check passed');

		if (window.getPrivateKey) {
			//alert('DEBUG: ProfileOnLoad: window.getPrivateKey check passed');

			if (window.localStorage) {
				//alert('DEBUG: ProfileOnLoad: window.localStorage check passed, calling getPrivateKey()...');

				var pk = getPrivateKey();

				// span used to indicate whether openpgp signing is available
				lblSigningIndicator = document.getElementById('lblSigningIndicator');

				if (pk) {
					//alert('DEBUG: ProfileOnLoad: pk = GetPrivateKey() = ' + pk);

					if (lblSigningIndicator) {
						lblSigningIndicator.innerHTML = 'Yes';

						AddPrivateKeyLinks();
					}

					lblHandle = document.getElementById('lblHandle');

					if (lblHandle) {
						var strHandle = localStorage.getItem('avatar');
						if (strHandle) {
							lblHandle.innerHTML = strHandle;
						}
					}

					lblFingerprint = document.getElementById('lblFingerprint');

					if (lblFingerprint) {
						var strFingerprint = localStorage.getItem('fingerprint');
						if (strFingerprint) {
							lblFingerprint.innerHTML = strFingerprint;
						}
					}

					//alert('DEBUG: ProfileOnLoad: calling PubkeyPing()');
					PubkeyPing();
				} else {
					//alert('DEBUG: pk = false')
					if (lblSigningIndicator) {
						//alert('DEBUG: lblSigningIndicator check passed');
						if (window.openpgp) {
							//alert('DEBUG: window.openpgp check passed, setting no (available)');

							lblSigningIndicator.innerHTML = 'No (Available)';

							AddPrivateKeyLinks();
						} else {
							//alert('DEBUG: window.openpgp check passed, setting nope');

							lblSigningIndicator.innerHTML = 'Nope';
						}
					} else {
						//alert('DEBUG: lblSigningIndicator check FAILED');
					}
				}
			} else {
				//alert('DEBUG: ProfileOnLoad: window.localStorage check FAILED');
			}
		} else {
			//alert('DEBUG: ProfileOnLoad: window.getPrivateKey check FAILED');
		}
	} else {
		//alert('DEBUG: ProfileOnLoad: document.getElementById check FAILED');
	}
}



// end profile2.js.template