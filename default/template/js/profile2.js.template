// begin profile2.js.template
//
//if (window.localStorage && window.Promise) {
//
//}

if (!window.openpgp && document.head && document.head.appendChild && document.getElementById && window.localStorage && window.Promise) {
	//alert('DEBUG: loading openpgp.js');

	var script = document.createElement('script');
	script.src = '/openpgp.js';
	script.async = false; // This is required for synchronous execution
	document.head.appendChild(script);

	//alert('DEBUG: finished loading openpgp.js');
} else {
	//alert('DEBUG: not loading openpgp.js; window.openpgp = ' + window.openpgp + ' document.getElementById = ' + document.getElementById + ' window.localStorage = ' + window.localStorage + ' window.Promise = ' + window.Promise);
}


if (!window.MakeKey && document.head && document.head.appendChild && document.getElementById && window.localStorage) {
	//alert('DEBUG: loading crypto2.js');

	var script2 = document.createElement('script');
	script2.src = '/crypto2.js';
	script2.async = false; // This is required for synchronous execution
	document.head.appendChild(script2);

	//alert('DEBUG: finished loading crypto.js');
} else {
	//alert('DEBUG: not loading crypto2.js; ' + ' window.MakeKey = ' + window.MakeKey + ' document.getElementById = ' + document.getElementById + ' window.localStorage = ' + window.localStorage );
}

function btnSignout_Click(t) { // event for 'Sign Out' button's click
	//alert('DEBUG: btnSignout_Click begin');

	if (window.localStorage) {
		//alert('DEBUG: localStorage is true');

		var ls = window.localStorage;
		ls.removeItem('privatekey');
		ls.removeItem('publickey');
		ls.removeItem('fingerprint');
		ls.removeItem('avatar');

	}

	return true;
}

function btnRegister_Click(t) { // event for 'Register' button's click
// t is clicked button's "this" object
	//alert('DEBUG: btnRegister_Click() begin');

	if (window.localStorage && window.Promise) {
		// minimum features check

		//alert('DEBUG: btnRegister_Click: localStorage and Promise feature check pass');

		if (window.MakeKey) {
			//alert('DEBUG: btnRegister_Click: window.MakeKey exists');

			var intKeyGenResult = MakeKey();

			//alert('DEBUG: btnRegister_Click: intKeyGenResult = ' + intKeyGenResult);

			return intKeyGenResult;
		}

	} else {
		return true;
	}

	return true;
}

function getUserFp() { // retrieve stored user fingerprint from localstorage
	if (window.localStorage) {
		var fingerprint = localStorage.getItem('fingerprint');
		if (!fingerprint) {
//		if (fingerprint === null || fingerprint.length === 0) {
			return null;
		} else {
			return fingerprint;
		}
	}
}

function AddPrivateKeyLinks() {
    if (document.getElementById && window.getPrivateKey) {
	    var privateKey = getPrivateKey();
	    if (privateKey) {
	        var fieldset = document.getElementById('fldRegistration');

	        if (fieldset && document.createElement) {
	            var pProfileLink = document.createElement('p');

	            var aProfile = document.createElement('a');
	            aProfile.setAttribute('class', 'advanced');
	            aProfile.setAttribute('href', '/author/' + getUserFp());
	            aProfile.setAttribute('id', 'adsfad');
	            aProfile.innerHTML = 'go to profile';

	            pProfileLink.appendChild(aProfile);

	            fieldset.appendChild(pProfileLink);


	            var pSaveKeyAsTxt = document.createElement('p');

	            var aSaveKeyAsTxt = document.createElement('a');
	            aSaveKeyAsTxt.setAttribute('class', 'advanced');
	            aSaveKeyAsTxt.setAttribute('href', '#');
	            aSaveKeyAsTxt.setAttribute('id', 'linkSavePrivateKey');
	            aSaveKeyAsTxt.setAttribute('onclick', 'if (window.SavePrivateKeyAsTxt) { return SavePrivateKeyAsTxt(); }');
	            aSaveKeyAsTxt.innerHTML = 'save as file';

	            pSaveKeyAsTxt.appendChild(aSaveKeyAsTxt);

	            fieldset.appendChild(pSaveKeyAsTxt);

	            var pLoadKeyFromTxt = document.createElement('p');

//	            var aLoadKeyFromTxt = document.createElement('a');
//	            aLoadKeyFromTxt.setAttribute('class', 'advanced');
//	            aLoadKeyFromTxt.setAttribute('href', '#');
//	            aLoadKeyFromTxt.setAttribute('id', 'linkLoadPrivateKey');
//	            aLoadKeyFromTxt.setAttribute('onclick', 'if (window.LoadPrivateKeyFromTxt) { return LoadPrivateKeyFromTxt(); }');
//	            aLoadKeyFromTxt.innerHTML = 'load from file';
                // <input type='file' accept='text/plain' onchange='openFile(event)'>

                var fileLoadKeyFromText = document.createElement('input');
                fileLoadKeyFromText.setAttribute('type', 'file');
                fileLoadKeyFromText.setAttribute('accept', 'text/plain');
                fileLoadKeyFromText.setAttribute('onchange', 'openFile(event)');

//	            pLoadKeyFromTxt.appendChild(aLoadKeyFromTxt);
	            pLoadKeyFromTxt.appendChild(fileLoadKeyFromText);

	            fieldset.appendChild(pLoadKeyFromTxt);

//
//	            var pShowPrivateKey = document.createElement('p');
//
//	            var aShowPrivateKey = document.createElement('a');
//	            aShowPrivateKey.setAttribute('class', 'advanced');
//	            aShowPrivateKey.setAttribute('href', '#');
//	            aShowPrivateKey.setAttribute('id', 'linkShowPrivateKey');
//	            aShowPrivateKey.setAttribute('onclick', 'if (window.ShowPrivateKey) { return ShowPrivateKey(); }');
//	            aShowPrivateKey.innerHTML = 'show private key';
//
//	            pShowPrivateKey.appendChild(aShowPrivateKey);
//
//	            fieldset.appendChild(pShowPrivateKey);
            }
	    }
    }
}

function ProfileOnLoad() {
	//alert('DEBUG: ProfileOnLoad() begin');

	var lblSigningIndicator;
	if (document.getElementById) {
		//alert('DEBUG: ProfileOnLoad: document.getElementById = ' + document.getElementById);

		if (window.getPrivateKey && window.localStorage) {
			//alert('DEBUG: ProfileOnLoad: window.getPrivateKey = ' + window.getPrivateKey);

			var pk = getPrivateKey();

            lblSigningIndicator = document.getElementById('lblSigningIndicator');

			if (pk) {
				//alert('DEBUG: pk = GetPrivateKey() = ' + pk);

				if (lblSigningIndicator) {
					lblSigningIndicator.innerHTML = 'Yes';

					AddPrivateKeyLinks();
				}

				lblHandle = document.getElementById('lblHandle');

				if (lblHandle) {
					var strHandle = localStorage.getItem('avatar');
					if (strHandle) {
						lblHandle.innerHTML = strHandle;
					}
				}
			} else {
			    //alert('DEBUG: pk = false')
			    if (lblSigningIndicator) {
			        //alert('DEBUG: lblSigningIndicator = true');
			        if (window.openpgp) {
    			        //alert('DEBUG: window.openpgp = true');

					    lblSigningIndicator.innerHTML = 'Available';
                    } else {
                        //alert('DEBUG: window.openpgp = false');

                        lblSigningIndicator.innerHTML = 'Nope';
                    }
			    } else {
			        //alert('DEBUG: lblSigningIndicator = false');
			    }
			}
		}
	}
}

function ShowPrivateKey() { // displays private key in textarea
    //alert('DEBUG: ShowPrivateKey() begin');
    if (document.getElementById) {
        //alert('DEBUG: ShowPrivateKey: document.getElementById is true');

        var txtPrivateKey = document.getElementById('txtPrivateKey');
        if (txtPrivateKey) {
            //alert('DEBUG: ShowPrivateKey: txtPrivateKey is true');

            if (txtPrivateKey.style.display == 'none') {
                //alert('DEBUG: style is none, set to block');
                txtPrivateKey.style.display = 'block';
            } else {
                //alert('DEBUG: style is block, set to none');
                txtPrivateKey.style.display = 'none';
            }

            var linkShowPrivateKey = document.getElementById('linkShowPrivateKey');
            if (linkShowPrivateKey) {
                if (txtPrivateKey.style.display == 'none') {
                    linkShowPrivateKey.innerHTML = 'show private key';
                } else {
                    linkShowPrivateKey.innerHTML = 'hide private key';
                }
            }

            return false;
        }
    }

    if (window.getPrivateKey) {
	    var privateKey = getPrivateKey();
	    if (privateKey && document.createElement) {
	        var txtPrivKey = document.createElement('textarea');
	        txtPrivKey.setAttribute('cols', 80);
	        txtPrivKey.setAttribute('rows', 24);
	        txtPrivKey.setAttribute('id', 'txtPrivateKey');
	        txtPrivKey.innerHTML = privateKey;

	        var fldRegistration = document.getElementById('fldRegistration');
	        if (fldRegistration) {
    	        fldRegistration.appendChild(txtPrivKey);
	        } else {
    	        document.body.appendChild(txtPrivKey);
            }

            var linkShowPrivateKey = document.getElementById('linkShowPrivateKey');
            if (linkShowPrivateKey) {
                linkShowPrivateKey.innerHTML = 'hide private key';
            }

	        txtPrivKey.focus();

	        return false;
	    }
    }
}

function openFile(event) {
    var input = event.target;

    if (window.FileReader) {
        reader = new FileReader();

        // this eval is for hiding the "=function(){}" syntax from incompatible browsers
        // they shouldn't try to execute it because they don't make it here due to other tests
        eval('reader.onload = function() { var text = reader.result; LoadPrivateKeyFromTxt(text); }');
        reader.readAsText(input.files[0]);
    }
}


function LoadPrivateKeyFromTxt(text) {
    if (window.setPrivateKeyFromTxt) {
        setPrivateKeyFromTxt(text);
    }
}

function SavePrivateKeyAsTxt() {
    var myFp = getUserFp();
    var text = getPrivateKey();

    DownloadAsTxt(myFp + '.txt', text);
}

if (document.cookie) {
	//alert('DEBUG: cookie=' + document.cookie);
} else {
	//alert('DEBUG: document.cookie missing');
	if (window.localStorage) {
		//alert('DEBUG: window.localStorage exists');
		var fp = localStorage.getItem('fingerprint');
		if (fp) {
			//alert('DEBUG: fp exists, setting cookie via js');
			document.cookie = 'test=' + fp;
		}
	}
}


// end profile2.js.template