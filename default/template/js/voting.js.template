// == begin voting.js
//
//function PingUrl(url) { // loads arbitrary url
//// by creating an <img src=url on the page
//// it ain't pretty, but it's compatible
//	var img = document.createElement('img');
//	img.setAttribute("src", url);
//	document.body.appendChild(img);
//	// todo get rid of image eventually
//	// server-side shove an image into it as needed
//}

function PingUrl(url) { // loads arbitrary url via image
// compatible with most js
	if (document.images) {
		var img = document.images[0];

		if (img) {
			img.setAttribute("src", url);
		}
	}
}


//function OptionsDefault(token, privKeyObj) {
//	this.data = token;
//	this.privateKeys = [privKeyObj];
//}

function signCallback (signed) {
	var url = '/post.html?comment=' + encodeURIComponent(signed.data);

	if (PingUrl(url)) {
		// todo incrememnt counter
		if (window.AmIFresh) {
			// if fresh.js is included, decrease check interval
			intFreshTimeout = 1000;
			AmIFresh();
		}
	}
}

function signVote(t, token) { // signs a vote from referenced vote button
// t = reference to calling button's 'this'
// token = full voting token, in the format vote/$fileHash/$ballotTime/$voteValue/$checksum
	if (document.getElementById && window.getPrivateKey) {
	// basic dumb feature check #todo make smarter feature check ;
	// needs better compatibility for older browsers
		var privkey = getPrivateKey();
		// get private key
	
		if (!privkey) {
		// if there is no private key, just do a basic unsigned vote;
			t.enabled = false;
			t.style.backgroundColor = '$colorSuccessVoteUnsigned'; //#todo
			t.style.color = '$colorSuccessVoteUnsigned'; //#todo
			t.style.borderRadius = '5pt'; //#todo
	
			if (PingUrl(t.href)) {
				// todo increment counter
				if (window.AmIFresh) {
					// if fresh.js is included, decrease check interval
					intFreshTimeout = 1000;
					AmIFresh();
				}
			}

			return false;
		} else {
		// there is a private key

			// change the button's appearance, for appearance of responsiveness
			t.enabled = false;
			t.style.backgroundColor = '$colorSuccessVoteSigned'; //#todo
			t.style.color = '$colorSuccessVoteSigned';
			t.style.borderRadius = '5pt'; //#todo

			// load the private key into openpgp
			var privKeyObj = openpgp.key.readArmored(privkey).keys[0];

			var options;

			options = new Object();

			options.data = token;
			options.privateKeys = privKeyObj;

			openpgp.config.show_version = false;
			openpgp.config.show_comment = false;

			// sign the voting token and send to post.html when finished
			openpgp.sign(options).then(signCallback);

			return false;
		}
	}

	// return true so that calling link goes to its target
	return true;
}

// == end voting.js