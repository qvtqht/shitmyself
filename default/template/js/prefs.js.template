// == begin prefs.js

var showAdvancedLastAction = '';
var showBeginnerLastAction = '';

function ShowAdvanced(force) { // show or hide controls based on preferences
//handles class=advanced based on 'show_advanced' preference
//handles class=beginner based on 'beginner' preference
//force parameter
// 1 = does not re-do setTimeout
// 0 = previous preference values are remembered, and are not re-done
	if (window.localStorage && window.getElementsByClassName) {
		var displayValue = 'none'; // hide by default
		if (GetPrefs('show_advanced') == 1) { // check value of show_advanced preference
			displayValue = 'initial'; // display
		}

		var bgColor = 'initial';
		if (GetPrefs('advanced_highlight') == 1) { // check value of advanced_highlight preference
			bgColor = '#ffe0e0'; // advanced_highlight
		}

		if (force || showAdvancedLastAction != displayValue) {
			// thank you stackoverflow
			var divsToHide = document.getElementsByClassName("advanced"); //divsToHide is an array #todo nn3 compat
			for (var i = 0; i < divsToHide.length; i++) {
				//divsToHide[i].style.visibility = "hidden"; // or
				if (displayValue == 'initial' && divsToHide[i].nodeName == 'P') {
					divsToHide[i].style.display = 'block'; // depending on what you're doing
				} else if (displayValue == 'initial' && divsToHide[i].nodeName == 'TR') {
					divsToHide[i].style.display = 'table-row'; // depending on what you're doing
				} else if (displayValue == 'initial' && (divsToHide[i].nodeName == 'TH' || divsToHide[i].nodeName == 'TD')) {
					if (divsToHide[i].innerHTML != '') {
						divsToHide[i].style.display = 'table-cell'; // depending on what you're doing
					} else {
						divsToHide[i].style.display = 'none'; // depending on what you're doing
					}
				} else {
					divsToHide[i].style.display = displayValue; // depending on what you're doing
				}

				divsToHide[i].style.backgroundColor = bgColor;
			}
			showAdvancedLastAction = displayValue;
		}

		displayValue = 'initial'; // show by default
		if (GetPrefs('beginner') == 0) { // check value of beginner preference
			displayValue = 'none';
		}

		bgColor = 'initial';
		if (GetPrefs('beginner_highlight') == 1) { // check value of beginner preference
			bgColor = '#ffffc0'; // beginner_highlight
		}

		if (force || showBeginnerLastAction != displayValue) {
			var divsToShow = document.getElementsByClassName('beginner');//#todo nn3 compat

			for (var i = 0; i < divsToShow.length; i++) {
				if (displayValue == 'initial' && divsToShow[i].nodeName == 'P') {
					divsToShow[i].style.display = 'block'; // depending on what you're doing
				} else if (displayValue == 'initial' && divsToShow[i].nodeName == 'TR') {
					divsToShow[i].style.display = 'table-row'; // depending on what you're doing
				} else if (displayValue == 'initial' && (divsToShow[i].nodeName == 'TH' || divsToShow[i].nodeName == 'TD')) {
					if (divsToShow[i].innerHTML != '') {
						divsToShow[i].style.display = 'table-cell'; // depending on what you're doing
					} else {
						divsToShow[i].style.display = 'none'; // depending on what you're doing
					}
				} else {
					divsToShow[i].style.display = displayValue; // depending on what you're doing
				}

				divsToShow[i].style.backgroundColor = bgColor;
			}
			showBeginnerLastAction = displayValue;
		}
	}

	if (!force) {
		setTimeout(ShowAdvanced, 3000);
	}
}

function PrefsTest() { //sets an item into localstorage prefs
	SetPrefs('test', '123'); //set key 'test' to value '123

	//alert('tst');

	var a = GetPrefs('test'); // get value of key 'test'

	alert(a); // display alert with value of key

	return 0; // done
}

function GetPrefs(prefKey) { // get prefs value from localstorage
// prefKey = preference key for key-value pair
// needs optimizing #todo
	if (window.localStorage) {
		var currentPrefs = localStorage.getItem('prefs1');
		var prefsObj;
		if (currentPrefs) {
			prefsObj = JSON.parse(currentPrefs);
		} else {
			prefsObj = Object();
		}
		var prefValue = prefsObj[prefKey];

		if (!prefValue && prefValue != 0) {
			if (prefKey == 'beginner') {
				prefValue = 1;
			}
		}

		return prefValue;
	}
}

function SetPrefs(prefKey, prefValue) { // set prefs key prefKey to value prefValue
	if (window.localStorage) {
		var currentPrefs = localStorage.getItem('prefs1');
		var prefsObj;
		if (currentPrefs) {
			prefsObj = JSON.parse(currentPrefs);
		} else {
			prefsObj = Object();
		}
		prefsObj[prefKey] = prefValue;

		var newPrefsString = JSON.stringify(prefsObj);

		localStorage.setItem('prefs1', newPrefsString);
	}
}

function showHideCheckbox(id, ths, prefKey) { // saves value of checkbox, toggles affected elements
// id = id of pane to hide or show; not required
// ths = "this" of calling checkbox)
// prefKey = key of preference value to set with checkbox
//
// this function is a bit of a mess, could use a refactor #todo

	// this will look for pane with id=id and show/hide it if it exists
	// used on the profile page
	if (id) {
		var pane = document.getElementById(id);
		if (pane) {
			pane.style.display=(ths.checked ? 'block' : 'none')
		}
	}

	// saves checkbox's value as 0/1 value to prefs(prefKey)
   SetPrefs(prefKey, (ths.checked ? 1 : 0));

	// if checkbox is one of these four, call ShowAdvanced(1)
	// this will display or hide things based on settings
   if (
   	prefKey == 'show_advanced' ||
   	prefKey == 'beginner' ||
   	prefKey == 'beginner_highlight' ||
   	prefKey == 'advanced_highlight'
	) {
   	ShowAdvanced(1);
   }
}

if (document.getElementById) {
// below is code which sets the checked state of preference checkboxes
// based on preference state
	var pane;

	// advanced checkbox of current profile pane
	pane = document.getElementById('curIdAdv');
	if (pane && GetPrefs('show_advanced') == 1) {
		document.getElementById('curIdAdvC').checked = 1;
		showHideCheckbox('curIdAdv', document.getElementById('curIdAdvC'), 'show_advanced');
	}

	// current profile pane (advanced section)
	pane = document.getElementById('curIdAdv');
	if (pane) {
		//beginner checkbox
		if (GetPrefs('beginner') == 1) {
			var cb = document.getElementById('beginnerC');
			if (cb) {
				cb.checked = 1;
			}
		}

		// beginner_highlight checkbox
		if (GetPrefs('beginner_highlight') == 1) {
			var cb = document.getElementById('beginnerHighlight');
			if (cb) {
				cb.checked = 1;
			}
		}

		// advanced_highlight checkbox
		if (GetPrefs('advanced_highlight') == 1) {
			var cb = document.getElementById('advancedHighlight');
			if (cb) {
				cb.checked = 1;
			}
		}
		
		// display username checkbox
		if (GetPrefs('display_username') == 1) {
			var cb = document.getElementById('displayUsername');
			if (cb) {
				cb.checked = 1;
			}
		}
		
		// reload pages if changed checkbox
		if (GetPrefs('auto_reload_changed') == 1) {
			var cb = document.getElementById('reloadChanged');
			if (cb) {
				cb.checked = 1;
			}
		}
	}

	// create profile pane
	pane = document.getElementById('creaIdAdv');
	if (pane) {
		if (GetPrefs('show_advanced') == 1) {
			var cb = document.getElementById('chkShowAdvanced');
			if (cb) {
				cb.checked = 1;
				showHideCheckbox('creaIdAdv', document.getElementById('chkShowAdvanced'), 'show_advanced');
			}
		}
	}

	ShowAdvanced(0); // call ShowAdvanced
}
// == end prefs.js