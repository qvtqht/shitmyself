// == begin prefs.js

var showAdvancedLastAction = '';
var showBeginnerLastAction = '';
var showVoterLastAction = '';

var timerShowAdvanced;

function ShowControlsByClassName() { // shows or hides elements based on class name match
}

function SetElementVisible(element, displayValue, bgColor, borderStyle) { // sets element's visible status based on tag type
// also sets background color
// used for hiding/showing and highlighting beginner, advanced, and voter element classes on page.

	if (bgColor) {
		element.style.backgroundColor = bgColor;
	}

	if (borderStyle) {
		element.style.border = borderStyle;
		element.style.borderRadius = '3pt';
	}

	// depending on element type, we set different display style
	// block, table-row, table-cell, or default of 'initial' #todo may be a bug here

	if (displayValue == 'initial' && (element.nodeName == 'P' || element.nodeName == 'FIELDSET')) {
		element.style.display = 'block';
	} else if (displayValue == 'initial' && element.nodeName == 'TR') {
		element.style.display = 'table-row';
	} else if (displayValue == 'initial' && (element.nodeName == 'TH' || element.nodeName == 'TD')) {
		if (element.innerHTML != '') {
			element.style.display = 'table-cell';
		} else {
			element.style.display = 'none'; // empty table cells display = none #todo explain why?
		}
	} else {
		element.style.display = displayValue;
	}

	return 1;
}

function ShowAdvanced(force) { // show or hide controls based on preferences
//handles class=advanced based on 'show_advanced' preference
//handles class=beginner based on 'beginner' preference
//handles class=voting based on 'want_to_vote' preference
//force parameter
// 1 = does not re-do setTimeout (called this way from checkboxes)
// 0 = previous preference values are remembered, and are not re-done (called by timer)

	if (window.localStorage && document.getElementsByClassName) {
		var displayVoter = 'none'; // not voting by default
		if (GetPrefs('want_to_vote') == 1) { // check value of want_to_vote preference
			displayVoter = 'initial'; // display
		}

		if (force || showVoterLastAction != displayVoter) {
			var elemVoter = document.getElementsByClassName('voter');

			for (var i = 0; i < elemVoter.length; i++) {
				SetElementVisible(elemVoter[i], displayVoter, 0, 0);
			}
		}

		var displayValue = 'none'; // hide by default
		if (GetPrefs('show_advanced') == 1) { // check value of show_advanced preference
			displayValue = 'initial'; // display
		}

		var bgColor = 'initial';
		if (GetPrefs('advanced_highlight') == 1) { // check value of advanced_highlight preference
			bgColor = colorHighlightAdvanced; // advanced_highlight
		}

		if (force || showAdvancedLastAction != displayValue) {
			// thank you stackoverflow
			var divsToHide = document.getElementsByClassName("advanced"); //divsToHide is an array #todo nn3 compat
			for (var i = 0; i < divsToHide.length; i++) {
				//divsToHide[i].style.visibility = "hidden"; // or
				SetElementVisible(divsToHide[i], displayValue, bgColor, 0);
			}
			showAdvancedLastAction = displayValue;
		}

		displayValue = 'initial'; // show by default
		if (GetPrefs('beginner') == 0) { // check value of beginner preference
			displayValue = 'none';
		}

		bgColor = 'initial';
		if (GetPrefs('beginner_highlight') == 1) { // check value of beginner preference
			bgColor = colorHighlightBeginner; // beginner_highlight
		}

		if (force || showBeginnerLastAction != displayValue) {
			var divsToShow = document.getElementsByClassName('beginner');//#todo nn3 compat

			for (var i = 0; i < divsToShow.length; i++) {
				SetElementVisible(divsToShow[i], displayValue, bgColor, 0);
			}
			showBeginnerLastAction = displayValue;
		}

		if (window.timeoutFresh) {
			if (GetPrefs('notify_on_change')) {
				if (timeoutFresh) {
					// we're good
				} else {
					AmIFresh();
				}
			} else {
				if (timeoutFresh) {
					clearTimeout(timeoutFresh);
				}
			}
		}
	}
	
	setAva(); // #todo caching similar to above 

	if (!force) {
		if (timerShowAdvanced) {
			clearTimeout(timerShowAdvanced);
		}
		timerShowAdvanced = setTimeout(ShowAdvanced, 3000);
	}
}

function PrefsTest() { //sets an item into localstorage prefs
	SetPrefs('test', '123'); //set key 'test' to value '123

	//alert('tst');

	var a = GetPrefs('test'); // get value of key 'test'

	alert(a); // display alert with value of key

	return 0; // done
}

function GetPrefs(prefKey) { // get prefs value from localstorage
// prefKey = preference key for key-value pair
// needs optimizing #todo
	if (window.localStorage) {
		var currentPrefs = localStorage.getItem('prefs1');
		var prefsObj;
		if (currentPrefs) {
			prefsObj = JSON.parse(currentPrefs);
		} else {
			prefsObj = Object();
		}
		var prefValue = prefsObj[prefKey];

		if (!prefValue && prefValue != 0) {
			if (prefKey == 'beginner' || prefKey == 'beginner_highlight') {
				prefValue = 1;
			}
		}

		return prefValue;
	}
}

function SetPrefs(prefKey, prefValue) { // set prefs key prefKey to value prefValue
	if (window.localStorage) {
		var currentPrefs = localStorage.getItem('prefs1');
		var prefsObj;
		if (currentPrefs) {
			prefsObj = JSON.parse(currentPrefs);
		} else {
			prefsObj = Object();
		}
		prefsObj[prefKey] = prefValue;

		var newPrefsString = JSON.stringify(prefsObj);

		localStorage.setItem('prefs1', newPrefsString);
	}
}

function saveCheckbox(id, ths, prefKey) { // saves value of checkbox, toggles affected elements
// id = id of pane to hide or show; not required
// ths = "this" of calling checkbox)
// prefKey = key of preference value to set with checkbox
//
// this function is a bit of a mess, could use a refactor #todo
//	alert('saveCheckbox ' + id + ths + prefKey);

	// this will look for pane with id=id and show/hide it if it exists
	// used on the profile page
	if (id) {
		var pane = document.getElementById(id);
		if (pane) {
			pane.style.display=(ths.checked ? 'block' : 'none')
		}
	}

	// saves checkbox's value as 0/1 value to prefs(prefKey)
	SetPrefs(prefKey, (ths.checked ? 1 : 0));

	// if checkbox is one of these four, call ShowAdvanced(1)
	// this will display or hide things based on settings
	if (
		prefKey == 'show_advanced' ||
		prefKey == 'beginner' ||
		prefKey == 'beginner_highlight' ||
		prefKey == 'advanced_highlight' ||
		prefKey == 'display_username' ||
		prefKey == 'want_to_vote' ||
		prefKey == 'notify_on_change'
	) {
		ShowAdvanced(1);
	}

	return 1;
}

if (document.getElementById) {
// below is code which sets the checked state of preference checkboxes
// based on preference state
	var pane;

	// advanced checkbox of current profile pane
	pane = document.getElementById('curIdAdv');
	if (pane && GetPrefs('show_advanced') == 1) {
		var chkAdvanced = document.getElementById('chkShowAdvanced');
		if (chkAdvanced) {
			chkAdvanced.checked = 1;
		}

		chkAdvanced = document.getElementById('chkShowAdvanced2');
		if (chkAdvanced) {
			chkAdvanced.checked = 1;
		}

		saveCheckbox('curIdAdv', document.getElementById('chkShowAdvanced'), 'show_advanced');
	}

	// current profile pane (advanced section)
	pane = document.getElementById('curIdAdv');
	if (pane) {
		//beginner checkbox
		if (GetPrefs('beginner') == 1) {
			var cb = document.getElementById('chkBeginner');
			if (cb) {
				cb.checked = 1;
			}
		}

		//want_to_vote checkbox
		if (GetPrefs('want_to_vote') == 1) {
			var cb = document.getElementById('chkWantToVote');
			if (cb) {
				cb.checked = 1;
			}
		}

		// beginner_highlight checkbox
		if (GetPrefs('beginner_highlight') == 1) {
			var cb = document.getElementById('chkBeginnerHighlight');
			if (cb) {
				cb.checked = 1;
			}
		}

		// advanced_highlight checkbox
		if (GetPrefs('advanced_highlight') == 1) {
			var cb = document.getElementById('advancedHighlight');
			if (cb) {
				cb.checked = 1;
			}
		}
		
		// display username checkbox
		if (GetPrefs('display_username') == 1) {
			var cb = document.getElementById('displayUsername');
			if (cb) {
				cb.checked = 1;
			}
		}
		
		// reload pages if changed checkbox
		if (GetPrefs('notify_on_change') == 1) {
			var cb = document.getElementById('chkNotifyOnChange');
			if (cb) {
				cb.checked = 1;
			}
		}
	}

	// create profile pane
	pane = document.getElementById('creaIdAdv');
	if (pane) {
		if (GetPrefs('show_advanced') == 1) {
			var cb = document.getElementById('chkShowAdvanced');
			if (cb) {
				cb.checked = 1;
				saveCheckbox('creaIdAdv', document.getElementById('chkShowAdvanced'), 'show_advanced');
			}
		}
	}

	ShowAdvanced(0); // call ShowAdvanced
}

function ResetPrefs() {
	if (window.localStorage) {
		if (confirm('Reset all preferences to their defaults?')) {
			localStorage.removeItem('prefs1');

			ShowAdvanced(1);

			location.reload(); //#todo make this not necessary
		}
	}
}

function PrefsOnload() { // onload function for preferences page
	// show and hide page form as necessary
	showHideForms();
}

// == end prefs.js