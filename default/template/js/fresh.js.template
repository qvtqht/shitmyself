// == begin fresh.js
var freshClient;

function freshCallback() { // callback for requesting HEAD for current page
//alert('DEBUG: freshCallback() this.readyState = ' + this.readyState);

	if (this.readyState == this.HEADERS_RECEIVED || this.status == 200) {
	// headers received -- what we've been waiting for
		// document.title = 'DEBUG: callback received 200';
	    //alert('DEBUG: freshCallback() this.readyState == this.HEADERS_RECEIVED');

		var eTag = freshClient.getResponseHeader("ETag"); // etag header contains page 'fingerprint'

		//alert('DEBUG: eTag = ' + eTag);

		if (eTag) { // if eTag header has a value
			if (window.myOwnETag) {
				if (eTag != myOwnETag) {
					//document.title = 'freshCallback: y ' + window.myOwnETag + ';' + new Date().getTime();

					var ariaAlert;
					ariaAlert = document.getElementById('ariaAlert');
					if (!ariaAlert) {
						ariaAlert = document.createElement('p');
						ariaAlert.setAttribute('role', 'alert');
						ariaAlert.setAttribute('id', 'ariaAlert');
						ariaAlert.innerHTML = 'Page has changed. Reload to view.';
						//document.body.appendChild(ariaAlert);
						document.body.insertBefore(ariaAlert, document.body.firstChild);
					}

					if (document.title.substring(0,2) != '! ') {
						document.title = '! ' + document.title;
					}

					if (window.freshTimeoutId) {
						clearTimeout(window.freshTimeoutId);
					}
				} else {
					//document.title = 'freshCallback: x ' + window.myOwnETag + ';' + new Date().getTime();

					if (window.freshTimeoutId) {
						clearTimeout(window.freshTimeoutId);
					}
					window.freshTimeoutId = setTimeout('CheckIfFresh()', 3000);
				}
			}
		}
	}

	//alert('DEBUG: freshCallback() ends');
}

function CheckIfFresh() {
	//document.title = 'CheckIfFresh: ' + new Date().getTime();
	
	if (window.XMLHttpRequest && window.myOwnETag) {
		var mypath = window.mypath;

		if (!mypath) {
			mypath = window.location;
			window.mypath = mypath;
		}

		freshClient = new XMLHttpRequest();
		//freshClient.open("HEAD", mypath + '?' + new Date().getTime(), true);
		freshClient.open("HEAD", mypath, true);
		freshClient.setRequestHeader('Cache-Control', 'no-cache');
		freshClient.onreadystatechange = freshCallback;

		freshClient.send();
	}
}

if (window.GetPrefs) {
	var needNotify = GetPrefs('notify_on_change') || 0;
	if (needNotify == 1) { // check value of want_to_vote preference
//		CheckIfFresh();
	}
}


//alert('DEBUG: fresh.js');

// == end fresh.js