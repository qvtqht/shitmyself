// == begin settings.js

var showAdvancedLastAction = '';
var showBeginnerLastAction = '';
var showVoterLastAction = '';
var showMeaniesLastAction = '';
var showAdminLastAction = '';

var timerShowAdvanced;

function SetElementVisible(element, displayValue, bgColor, borderStyle) { // sets element's visible status based on tag type
// also sets background color
// used for hiding/showing and highlighting beginner, advanced, and voter element classes on page.

    //alert ('DEBUG: \nelement:' + element + "\ndisplayValue:" + displayValue + "\nbgColor:" + bgColor + "\nborderStyle:" + borderStyle + "\n");

	if (bgColor) {
		// background color
		if (bgColor == 'initial') {
			bgColor = '$colorWindow';
		}
		element.style.backgroundColor = bgColor;
		// #todo this may cause issues in some themes
	}

	if (borderStyle) {
		// border style
		element.style.border = borderStyle;
		element.style.borderRadius = '3pt';
	}

	// depending on element type, we set different display style
	// block, table-row, table-cell, or default of 'initial'
	if (displayValue == 'initial' && (element.nodeName == 'P' || element.nodeName == 'H3' || element.nodeName == 'FIELDSET')) {
		element.style.display = 'block';
	} else if (displayValue == 'initial' && element.nodeName == 'TR') {
		element.style.display = 'table-row';
	} else if (displayValue == 'initial' && (element.nodeName == 'TH' || element.nodeName == 'TD')) {
		if (element.innerHTML != '') {
			element.style.display = 'table-cell';
		} else {
			element.style.display = 'none'; // empty table cells display = none #todo explain why?
		}
	} else {
		if (displayValue == 'initial') {
			displayValue = 'inline';
		}
		element.style.display = displayValue;
	}

	return 1;
}

function ShowAll (t) { // shows all elements, overriding settings
// admin elements are excluded. only beginner, advanced, and voter class elements are shown

    if (document.getElementsByClassName) {
        var display;
        display = 'initial';

        var elements = document.getElementsByClassName('advanced');
        for (var i = 0; i < elements.length; i++) {
            SetElementVisible(elements[i], display, '$colorHighlightAdvanced', 0);
        }
        elements = document.getElementsByClassName('beginner');
        for (var i = 0; i < elements.length; i++) {
            SetElementVisible(elements[i], display, '$colorHighlightBeginner', 0);
        }
        elements = document.getElementsByClassName('voter');
        for (var i = 0; i < elements.length; i++) {
            SetElementVisible(elements[i], display, 0, 0);
        }

        if (timerShowAdvanced) {
            clearTimeout(timerShowAdvanced);
        }
//        timerShowAdvanced = setTimeout('ShowAdvanced(1);', 10000);

        return false;
    }

    return true;
}

function ShowAdvanced(force) { // show or hide controls based on preferences
//handles class=advanced based on 'show_advanced' preference
//handles class=beginner based on 'beginner' preference
//handles class=voting based on 'want_to_vote' preference
//handles class=tag-abuse based on 'show_meanies' preference
//force parameter
// 1 = does not re-do setTimeout (called this way from checkboxes)
// 0 = previous preference values are remembered, and are not re-done (called by timer)

	//alert('DEBUG: ShowAdvanced(' + force + ')');

	if (window.localStorage && document.getElementsByClassName) {
		//alert('DEBUG: ShowAdvanced: feature check passed!');

		var displayVoter = 'none'; // no voting controls by default
		if (GetPrefs('want_to_vote') == 1) {
		    // check value of want_to_vote preference
			displayVoter = 'initial'; // display
		}

		if (force || showVoterLastAction != displayVoter) {
			var elemVoter = document.getElementsByClassName('voter');

			for (var i = 0; i < elemVoter.length; i++) {
				SetElementVisible(elemVoter[i], displayVoter, 0, 0);
			}
			showVoterLastAction = displayVoter;
		}

		///////////

		var displayMeanies = 'none'; // no voting controls by default
		if (GetPrefs('show_meanies') == 1) {
		    // check value of show_meanies preference
			displayMeanies = 'initial'; // display
		}

		if (force || showMeaniesLastAction != displayMeanies) {
			var elemMeanies = document.getElementsByClassName('tag-abuse');

			for (var i = 0; i < elemMeanies.length; i++) {
				SetElementVisible(elemMeanies[i], displayMeanies, 0, 0);
			}
			showMeaniesLastAction = displayMeanies;
		}

		///////////

		var displayAdmin = 'none'; // not voting by default
		if (GetPrefs('show_admin') == 1) { // check value of show_admin preference
			displayAdmin = 'initial'; // display
		}

		if (force || showAdminLastAction != displayAdmin) {
			var elemAdmin = document.getElementsByClassName('admin');

			for (var i = 0; i < elemAdmin.length; i++) {
				SetElementVisible(elemAdmin[i], displayAdmin, 0, 0);
			}
		}

		var displayValue = 'none'; // hide by default
		if (GetPrefs('show_advanced') == 1) { // check value of show_advanced preference
			displayValue = 'initial'; // display
		}

		var bgColor = 'initial';
		if (GetPrefs('advanced_highlight') == 1) { // check value of advanced_highlight preference
			bgColor = '$colorHighlightAdvanced'; // advanced_highlight
		}

		if (force || showAdvancedLastAction != (displayValue + bgColor)) {
			// thank you stackoverflow
			var divsToHide = document.getElementsByClassName("advanced"); //divsToHide is an array #todo nn3 compat
			for (var i = 0; i < divsToHide.length; i++) {
				//divsToHide[i].style.visibility = "hidden"; // or
				SetElementVisible(divsToHide[i], displayValue, bgColor, 0);
			}
//			var clock = document.getElementById('txtClock');
//			if (clock) {
//			    SetElementVisible(clock, displayValue, bgColor, 0);
//			}
			showAdvancedLastAction = displayValue + bgColor;
		}

		displayValue = 'initial'; // show by default
		if (GetPrefs('beginner') == 0) { // check value of beginner preference
			displayValue = 'none';
		}

		bgColor = 'initial';
		if (GetPrefs('beginner_highlight') == 1) { // check value of beginner preference
			bgColor = '$colorHighlightBeginner'; // beginner_highlight
		}

		if (force || showBeginnerLastAction != displayValue + bgColor) {
			var divsToShow = document.getElementsByClassName('beginner');//#todo nn3 compat

			for (var i = 0; i < divsToShow.length; i++) {
				SetElementVisible(divsToShow[i], displayValue, bgColor, 0);
			}
			showBeginnerLastAction = displayValue + bgColor;
		}

		if (window.freshTimeoutId) {
			// reset the page change notifier state
			clearTimeout(window.freshTimeoutId);

			if (GetPrefs('notify_on_change')) {
				// check if page has changed, notify user if so
				CheckIfFresh();
			}
		}

		if (window.setAva) {
			setAva(); // #todo caching similar to above
		}

		if (!force) {
			if (timerShowAdvanced) {
				clearTimeout(timerShowAdvanced);
			}
			timerShowAdvanced = setTimeout('ShowAdvanced()', 3000);
		}
	} else {
		//alert('DEBUG: ShowAdvanced: feature check FAILED! window.localStorage: ' + window.localStorage + '; document.getElementsByClassName: ' + document.getElementsByClassName);
	}
}

function GetPrefs(prefKey) { // get prefs value from localstorage
	if (window.localStorage) {
		var currentPrefs = localStorage.getItem('prefs1');

		var prefsObj;
		if (currentPrefs) {
			prefsObj = JSON.parse(currentPrefs);
		} else {
			prefsObj = Object();
		}
		var prefValue = prefsObj[prefKey];

		if (!prefValue && prefValue != 0) {
			if (prefKey == 'beginner' || prefKey == 'beginner_highlight') {
				prefValue = 1;
			}
		}

		return prefValue;
	}
}

function SetPrefs(prefKey, prefValue) { // set prefs key prefKey to value prefValue
    //alert('DEBUG: SetPrefs(' + prefKey + ', ' + prefValue + ')');

	if (window.localStorage) {
		var currentPrefs = localStorage.getItem('prefs1');
		var prefsObj;
		if (currentPrefs) {
			prefsObj = JSON.parse(currentPrefs);
		} else {
			prefsObj = Object();
		}
		prefsObj[prefKey] = prefValue;

		var newPrefsString = JSON.stringify(prefsObj);

		localStorage.setItem('prefs1', newPrefsString);

		return 0;
	}

	return 1;
}

function saveCheckbox (id, ths, prefKey) { // saves value of checkbox, toggles affected elements
// id = id of pane to hide or show; not required
// ths = "this" of calling checkbox)
// prefKey = key of preference value to set with checkbox
//
// this function is a bit of a mess, could use a refactor #todo
	//alert('DEBUG: saveCheckbox(' + id + ',' + ths + ',' + prefKey);

	// this will look for pane with id=id and show/hide it if it exists
	// used on the profile page
	if (document.getElementById && id) {
		var pane = document.getElementById(id);
		if (pane) {
			pane.style.display=(ths.checked ? 'block' : 'none')
		}
	}

	var checkboxState = (ths.checked ? 1 : 0);
	//alert('DEBUG: checkboxState = ' + checkboxState);

	// saves checkbox's value as 0/1 value to prefs(prefKey)
	SetPrefs(prefKey, (ths.checked ? 1 : 0));

	//alert('DEBUG: after SetPrefs, GetPrefs(' + prefKey + ') returns: ' + GetPrefs(prefKey));

	// call ShowAdvanced(1) to update ui appearance
	ShowAdvanced(1);

	return 1;
}

function ResetSettings() {
	if (window.localStorage) {
		if (confirm('Reset all settings to their defaults?')) {
			localStorage.removeItem('prefs1');

			ShowAdvanced(1);

			//location.reload(); //#todo make this not necessary
		}
	}
}

function modeChange(ab) { // updates several settings to change to "ui mode" (beginner, advanced, etc.)
    //alert('DEBUG: modeChange(' + ab + ')');

	if (window.localStorage && window.SetPrefs) {
		if (ab == 'beginner') {
			SetPrefs('show_advanced', 0);
			SetPrefs('advanced_highlight', 0);
			SetPrefs('beginner', 1);
			SetPrefs('beginner_highlight', 1);
			SetPrefs('notify_on_change', 1);
			SetPrefs('show_admin', 0);
		} else if (ab == 'intermediate') {
			SetPrefs('show_advanced', 1);
			SetPrefs('advanced_highlight', 1);
			SetPrefs('beginner', 1);
			SetPrefs('beginner_highlight', 1);
			SetPrefs('notify_on_change', 1);
            SetPrefs('show_admin', 0);
		} else if (ab == 'advanced') {
			SetPrefs('show_advanced', 1);
			SetPrefs('advanced_highlight', 0);
			SetPrefs('beginner', 0);
			SetPrefs('beginner_highlight', 0);
			SetPrefs('notify_on_change', 1);
            SetPrefs('show_admin', 0);
		} else if (ab == 'minimal') {
			SetPrefs('show_advanced', 0);
			SetPrefs('advanced_highlight', 0);
			SetPrefs('beginner', 0);
			SetPrefs('beginner_highlight', 0);
			SetPrefs('notify_on_change', 0);
//            SetPrefs('show_admin', 0);
		} else if (ab == 'admin') {
            SetPrefs('show_admin', 1);
            SetPrefs('want_to_vote', 1);
            SetPrefs('show_meanies', 1);
		}

		ShowAdvanced(1);

        //alert('DEBUG: window.SetPrefs was found, and ShowAdvanced(1) was called');

		return false;
	}

	//alert('DEBUG: returning true');

	return true;
}

function SettingsOnload() { // onload function for preferences page
	//alert('DEBUG: SettingsOnload() begin');

	if (document.getElementById) {
	// below is code which sets the checked state of preference checkboxes
	// based on preference state
		var pane;

		if (GetPrefs('want_to_vote') == 1) {
			var cb = document.getElementById('chkWantToVote');
			if (cb) {
				cb.checked = 1;
			}
		}

		if (GetPrefs('show_meanies') == 1) {
			var cbM = document.getElementById('chkShowMeanies');
			if (cbM) {
				cbM.checked = 1;
			}
		}


		ShowAdvanced(0); // call ShowAdvanced
	}

	ShowAdvanced(1);
}

ShowAdvanced(0); // #todo replace with body.onload ?

// == end settings.js