function translitKey(e, t) {
    var nl = '$';

    var key = '$';

    if (0 && e.key) {
        key = e.key;
    } else if (e.keyCode) {
        key = String.fromCharCode((96 <= e.keyCode && e.keyCode <= 105)? (e.keyCode - 48) : (e.keyCode));
    }

    if (e.ctrlKey || e.metaKey) {
        return;
    }

    if (e.altKey) {
        if (e.key == 'e') {
            nl = "ё";
        } else if (e.key == 'E') {
            nl = 'Ё';
        } else if (e.key == '-' || e.key == '_' || e.key == '=' || e.key == '+') {
            nl = e.key;
        } else {
            return;
        }
    } else {
        var keysEn =
            "`-=" +
            "~_+" +
            "qwertyuiop[]\\" +
            "QWERTYUIOP{}|" +
            "asdfghjkl" +
            "ASDFGHJKL" +
            "zxcvbnm" +
            "ZXCVBNM"
        ;
        var keysRu =
            "щьъ" +
            "Щ-=" +
            "яшертыуиопюжэ" +
            "ЯШЕРТЫУИОПЮЖЭ" +
            "асдфгчйкл" +
            "АСДФГЧЙКЛ" +
            "зхцвбнм" +
            "ЗХЦВБНМ"
        ;

        //document.write('<pre>' + keysEn + "\n" + keysRu + '</pre>');

        if (keysEn.length != keysRu.length) {
            //alert('DEBUG: onKeyDown(e) Warning: length mismatch')
        }

        if (e.key) {
            for (var i = 0; i < keysEn.length; i++) {
                if (e.key == keysEn.substr(i, 1)) {
                    //alert('DEBUG: i = ' + i + ' keysEn.substr(i, 1): ' + keysEn.substr(i, 1) + ' ; keysRu.substr(i, 1): ' + keysRu.substr(i, 1));
                    nl = keysRu.substr(i, 1);

                    break;
                }
            }
        }
    }

    if (nl == '$') {
        return;
    }

    e.preventDefault();

    //alert('DEBUG: e.preventDefault() was called');

    var txt = t;
//    if (!txt) {
//        if (document.getElementById) {
//            var txt = document.getElementById('txtTranslit');
//        } else {
//            if (document.forms) {
//                var form = document.forms['frmTest'];
//                if (form) {
//                    txt = form.txtTranslit;
//                    if (txt) {
//                        alert(1);
//                    }
//                }
//            }
//        }
//    }

    if (txt) {
        txt.value = txt.value + nl;
        //replaceSelectedText(txt, nl);
    } else {
        //alert('DEBUG: no text field');
    }
}

function RunTest() {
	//alert('DEBUG: RunTest() begins');

	//document.write('<form><input type=submit></form>');

    var frmTestForms = document.forms['frmTest'];
    if (frmTestForms) {
        //alert('DEBUG: frmTestForms = document.forms[frmTest] = ' + frmTestForms);
    } else {
        //alert('DEBUG: frmTestForms was false');
    }

    var frmTestDot = document.frmTest;
    if (frmTestDot) {
        //alert('DEBUG: frmTest = document.frmTestDot = ' + frmTestDot);
    } else {
        //alert('DEBUG: frmTestForms was false');
    }

    if (document.getElementById) {
        var frmTestGebi = document.getElementById('frmTest');
        if (frmTestGebi) {
            //alert('DEBUG: frmTestGebi = document.getElementById(frmTest) = ' + frmTestGebi);
        } else {
            //alert('DEBUG: frmTestGebi was false');
        }
    } else {
        //alert('DEBUG: document.getElementById was false');
    }
//
//    if (1) {
//        document.getElementById('txtFormTestForms').value = "document.forms['frmTest'] : " + (frmTestForms ? 'yes' : 'no');
//    }

	return false;
}


function getInputSelection(el) {
    var start = 0, end = 0, normalizedValue, range,
        textInputRange, len, endRange;

    if (typeof el.selectionStart == "number" && typeof el.selectionEnd == "number") {
        start = el.selectionStart;
        end = el.selectionEnd;
    } else {
        range = document.selection.createRange();

        if (range && range.parentElement() == el) {
            len = el.value.length;
            normalizedValue = el.value.replace(/\r\n/g, "\n");

            // Create a working TextRange that lives only in the input
            textInputRange = el.createTextRange();
            textInputRange.moveToBookmark(range.getBookmark());

            // Check if the start and end of the selection are at the very end
            // of the input, since moveStart/moveEnd doesn't return what we want
            // in those cases
            endRange = el.createTextRange();
            endRange.collapse(false);

            if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
                start = end = len;
            } else {
                start = -textInputRange.moveStart("character", -len);
                start += normalizedValue.slice(0, start).split("\n").length - 1;

                if (textInputRange.compareEndPoints("EndToEnd", endRange) > -1) {
                    end = len;
                } else {
                    end = -textInputRange.moveEnd("character", -len);
                    end += normalizedValue.slice(0, end).split("\n").length - 1;
                }
            }
        }
    }
}

function replaceSelectedText(el, text) {
    var sel = getInputSelection(el), val = el.value;
    el.value = val.slice(0, sel.start) + text + val.slice(sel.end);
}






//document.body.onkeyup='alert(keycode)';