<?php

//if (1/0) {
//	// exit
//}

//print_r($_GET);

// this fixes a crash bug in mosaic. it should not cause a problem anywhere else
// <_<     >_>      o_O      -_-     ^_^
header('Content-Type: text/html');

include_once('utils.php');
//
//if (1/0) {
//    // disabled
//}

function SetHtmlClock($html) {
	$newHtml = $html;

	return $html;
}

function StripHeavyTags($html) {
	$tags = array(
		'table', 'tr', 'td', 'span', 'fieldset', 'legend', 'font',
		'script', 'style', 'big'
	);

	{
	// this would be necessary if the br tags were not already there
	// may be useful in the future to do automated fixing-up of existing templates
	// then we can remove all those <br> tags from the templates and make them look neater
		$html = preg_replace('/\<br\>\<\/td\>/', '; ', $html);
		$html = preg_replace('/\<\/td\>/', '; ', $html);
		$html = preg_replace('/\<\/tr\>/', '<br>', $html);
		$html = preg_replace('/\<\/fieldset\>/', '<br>', $html);
		$html = preg_replace('/\<\/legend\>/', '<br>', $html);
		$html = preg_replace('/\<\/table\>/', '<br><hr>', $html);
	}

	foreach ($tags as $tag) {
		$html = preg_replace('/\<'.$tag.'[^>]+\>/', '', $html);
		//$html = preg_replace('/\<\/'.$tag.'\>/', '', $html);
		$html = str_replace('<'.$tag.'>', '', $html);
		$html = str_replace('</'.$tag.'>', '', $html);
	}

	return $html;
}

function StripComments ($html) { //strips comments from html
	$html = preg_replace('/\<\!--[^>]+\>/', '', $html);

	return $html;
}

function CleanBodyTag ($html) {
	$html = preg_replace('/\<body[^>]+\>/', '<body>', $html);

	return $html;
}

function StripWhitespace ($html) { //strips extra whitespace from html
//	while (preg_match('/[\t\n ]{2}'
	$html = str_replace("\t", ' ', $html);

	$html = str_replace("\n ", "\n", $html);
	$html = str_replace("\n ", "\n", $html);
	$html = str_replace("\n ", "\n", $html);
	$html = str_replace("\n ", "\n", $html);
	$html = str_replace("\n ", "\n", $html);
	$html = str_replace("\n ", "\n", $html);
	$html = str_replace("\n ", "\n", $html);
	$html = str_replace("\n ", "\n", $html);
	$html = str_replace("\n ", "\n", $html);
	$html = str_replace("\n ", "\n", $html);

//
	$html = str_replace("\n", ' ', $html);

	$html = str_replace('  ', ' ', $html);
	$html = str_replace('  ', ' ', $html);
	$html = str_replace('  ', ' ', $html);
	$html = str_replace('  ', ' ', $html);
	$html = str_replace('  ', ' ', $html);
//
//	while (! (strpos($html, '  ') === false)) {
//		$html = str_replace('  ', ' ', $html);
//	}
//
	$html = str_replace('> <', '><', $html);
////	$html = str_replace('> ', '>', $html);
////	$html = str_replace(' <', '<', $html);
//	$html = str_replace('<br><br>', '<br>', $html);
//	$html = str_replace('<br> <br>', '<br>', $html);

	return $html;
}

function InjectJs ($html, $scriptNames, $injectMode = 'before', $htmlTag = '</body>') { // inject js template(s) before </body> ; $html, @scriptNames
// $injectMode: before, after, append
// $htmlTag: e.g. </body>, only used with before/after
// if $htmlTag is not found, does fall back to append

	WriteLog('InjectJs() begin...');

	if (!GetConfig('admin/js/enable')) {
		return $html;
	}

	$scriptsText = '';  // will contain all the js we want to inject
	$scriptsComma = ''; // separator between scripts, will be set to \n\n after first script

	$scriptsDone = array();  // array to keep track of scripts we've already injected, to avoid duplicates

//	if (GetConfig('html/clock')) {
//		// if clock is enabled, automatically add its js
//		$scriptNames[] = 'clock';
//	}
//
//	if (GetConfig('html/fresh_js')) {
//		// if clock is enabled, automatically add it
//		$scriptNames[] = 'fresh';
//	}
//
//	if (GetConfig('admin/force_profile')) {
//		// if force_profile is enabled, automatically add it
//		$scriptNames[] = 'force_profile';
//	}
//
	//output list of all the scripts we're about to include
	$scriptNamesList = implode(' ', $scriptNames);

	// loop through all the scripts
	foreach ($scriptNames as $script) {
		// only inject each script once, otherwise move on
		if (isset($scriptsDone[$script])) {
			next;
		} else {
			$scriptsDone[$script] = 1;
		}

		// separate each script with \n\n
		if (!$scriptsComma) {
			$scriptsComma = "\n\n";
		} else {
			$scriptsText .= $scriptsComma;
		}

		$scriptTemplate = GetTemplate("js/$script.js.template");

		if (!$scriptTemplate) {
			WriteLog("InjectJs: WARNING: Missing script contents for $script");
			if (GetConfig('admin/debug')) {
				die('InjectJs: Missing script contents');
			}
		}

// todo finish porting below
//		if ($script eq 'voting') {
//			# for voting.js we need to fill in some theme colors
//			my $colorSuccessVoteUnsigned = GetThemeColor('success_vote_unsigned');
//			my $colorSuccessVoteSigned = GetThemeColor('success_vote_signed');
//
//			$scriptTemplate =~ s/\$colorSuccessVoteUnsigned/$colorSuccessVoteUnsigned/g;
//			$scriptTemplate =~ s/\$colorSuccessVoteSigned/$colorSuccessVoteSigned/g;
//		}
//
//		if ($script eq 'settings') {
//			# for settings.js we also need to fill in some theme colors
//			my $colorHighlightAdvanced = GetThemeColor('highlight_advanced');
//			my $colorHighlightBeginner = GetThemeColor('highlight_beginner');
//
//			$scriptTemplate =~ s/\$colorHighlightAdvanced/$colorHighlightAdvanced/g;
//			$scriptTemplate =~ s/\$colorHighlightBeginner/$colorHighlightBeginner/g;
//		}
//
//		if (index($scriptTemplate, '>') > -1) {
//			# warning here if script content contains > character, which is incompatible with mosaic's html comment syntax
//			WriteLog('InjectJs(): WARNING! Inject script "' . $script . '" contains > character');
//		}
//
//		if (GetConfig('admin/js/debug')) {
//			#uncomment all javascript debug alert statements
//			#and replace them with confirm()'s which stop on no/cancel
//			#
//			# $scriptTemplate =~ s/\/\/alert\('DEBUG:/alert('DEBUG:/g;
//			# $scriptTemplate =~ s/\/\/alert\('DEBUG:/if(!window.dbgoff)dbgoff=confirm('DEBUG:/g;
//			$scriptTemplate =~ s/\/\/alert\('DEBUG:/if(!window.dbgoff)dbgoff=!confirm('DEBUG:/g;
//		}
//
		// add to the snowball of javascript
		$scriptsText .= $scriptTemplate;
	}

	// get the wrapper, i.e. <script>$javascript</script>
	$scriptInject = GetTemplate('scriptinject.template');


	// fill in the wrapper with our scripts from above
	$scriptInject = str_replace('$javascript', $scriptsText, $scriptInject);

	$scriptInject = '<!-- InjectJs: ' . $scriptNamesList . ' -->' . "\n\n" . $scriptInject;

	if ($injectMode != 'append' && index($html, $htmlTag) > -1) {
		// replace it into html, right before the closing </body> tag
		if ($injectMode == 'before') {
			$html = str_replace($htmlTag, $scriptInject . $htmlTag, $html);
		} else {
			$html = str_replace($htmlTag, $htmlTag . $scriptInject, $html);
		}
	} else {
		if ($injectMode != 'append') {
			WriteLog('InjectJs: WARNING! $html does not contain $htmlTag, falling back to append mode');
		}
		$html .= "\n" . $scriptInject;
	}

	return $html;
}

function HandleNotFound($path, $pathRel) { // handles 404 errors
	if (
		$path == '/stats.html' ||
		$path == '/write.html'
	) {
		// currently able to handle these pages

		// remember current working directory, we'll need it later
		$pwd = getcwd();
		WriteLog('$pwd = ' . $pwd);

		$pathRel = '.' . $path; // relative path of $path (to current directory, which should be html/)

		if (GetConfig('admin/php/regrow_404_pages')) {
			// attempt to make page on the fly
			
			WriteLog("cd .. ; ./pages.pl --summary");
			WriteLog(`cd .. ; ./pages.pl --summary`);
		}

		if ($pwd) {
			WriteLog("cd $pwd");
			WriteLog(`cd $pwd`);
		}

		if ($pathRel && file_exists($pathRel)) {
			WriteLog('$pathRel exist: ' . $pathRel);
			$html = file_get_contents($pathRel);
		} else {
			WriteLog('$pathRel NO exist: ' . $pathRel);
			if (file_exists('404.html')) {
				$html = file_get_contents('404.html');
			}
		}
	} else {
		// don't know how to handle this request, default to 404
		if (file_exists('404.html')) {
			$html = file_get_contents('404.html');
		}
	}

	if (!$html && file_exists('404.html')) {
		// something strange happened, and $html is still blank
		// try to get 404.html into it
		WriteLog('HandleNotFound: Fallback which should not happen');
		$html = file_get_contents('404.html');
	}

	if (!$html) {
		// evidently, 404.html didn't work, just use some hard-coded html
		WriteLog('HandleNotFound: Fallback which should not happen');
		$html = '<html><body>404</body></html>';
	}

	return $html;
}

if (GetConfig('admin/php/route_enable')) {
// admin/php/route_enable is true

	$redirectUrl = '';

	if ($_GET) {
		// there is a get request
		WriteLog(print_r($_GET, 1));

		if (isset($_GET['path'])) {
			$serverMessage = '';

			// get request includes path argument
			$path = $_GET['path'];
			WriteLog('$path = ' . $path);
			$pathFull = realpath('.'.$path);


			if ($path == '/profile.html') {
			} else {
				// if registration is required, redirect user to profile.html
				if (GetConfig('admin/force_profile')) {
					$clientHasCookie = 0;
					if (isset($_COOKIE)) {
						if (isset($_COOKIE['cookie'])) {
							$clientHasCookie = 1;
						}
					}

					if (!$clientHasCookie) {
						$registerMessage = StoreServerMessage('This community requires you to register.');

						header('Location: /profile.html?message=' . $registerMessage);
					}
				}
			}


			$pathSelf = $_SERVER['PHP_SELF'];
			$pathSelfReal = realpath('.'.$pathSelf);
			$pathValidRoot = substr($pathSelfReal, 0, strlen($pathSelfReal) - strlen($pathSelf));

			WriteLog('$pathValidRoot = ' . $pathValidRoot . ';');
			WriteLog('$pathFull = ' . $pathFull . ';');
			WriteLog('substr($pathFull, 0, strlen($pathValidRoot)) = ' . substr($pathFull, 0, strlen($pathValidRoot)) . ';');

			if ($path == '/404.html' || $pathFull && substr($pathFull, 0, strlen($pathValidRoot)) == $pathValidRoot) {
				// mitigate directory traversal?

				WriteLog('$path = "' . $path . '"');
				if ($path) {
					$pathRel = '.' . $path; // relative path of $path (to current directory, which should be html/)
					if ($path != '/404.html' && file_exists($pathRel)) {
						WriteLog("file_exists($pathRel) was true");
						
						if ($path == '/settings.html') {
							if (isset($_GET['chkWantToVote']) && isset($_GET['query']) && $_GET['query'] == 'ui=Admin') {
								include_once('cookie.php');
								WriteLog('$cookie = ' . $cookie);
							}
						}

						if ($path == '/write.html') {
							if (file_exists('write.php')) {
								include('write.php');
							}
						}

						if (
							isset($_GET['message'])
						)
						{
							WriteLog('$_GET[message] exists');
							$messageId = $_GET['message'];

							if ($messageId == 'test') {
								$newMessageId = StoreServerMessage('
									Over the firewall,
									out the antenna,
									into the router,
									shot to the modem,
									out the transponder,
									bounce into space,
									off the satellite,
									over their firewall,
									into the forums ....
									nothing but NET
								');
								$newUrl = $path . '?message=' . $newMessageId;

								if (!$redirectUrl) {
									$redirectUrl = $newUrl;
								}
							}

							if (preg_match('/^[a-f0-9]{8}$/', $messageId)) {
								$serverMessage = RetrieveServerMessage($messageId);
								$serverMessage = trim($serverMessage);
							}

							if (!$serverMessage && !$redirectUrl) {
								$redirectUrl = $path;
							}
						} else {
							WriteLog('$_GET[message] NOT exists');
						}

						if (
							isset($_GET['chkUpgrade']) &&
							isset($_GET['btnUpgrade'])
						)
						{
							WriteLog('Upgrade requested');

							//WriteLog(`/home/ily/hike/upgrade.pl`);
						}

						if (
							isset($_GET['setconfig/html/theme']) &&
							isset($_GET['setconfig/html/theme']) &&
							isset($_GET['btnSetTheme'])
						)
						{
							WriteLog('Theme change requested');

							$newTheme = $_GET['setconfig/html/theme'];
							$themeUpdateFile = 'setconfig/html/theme=' . $newTheme;

							// write file
							// server sign
							// call processor

							//
							// this quick hack doesn't work yet for lack of SetConfig() in php code
							//
							//SetConfig('html/theme', $newTheme);
							file_put_contents('../config/html/theme', $newTheme);
							//

							if (GetConfig('theme/' . $newTheme . '/additional.css')) {
								file_put_contents('../config/html/theme', $newTheme);
							}

							$messageThemeChanged = StoreServerMessage('Theme update: ' . $newTheme);
							if (!$redirectUrl) {
								$redirectUrl = '/settings.html?message=' . $messageThemeChanged;
							}
						}


						if (
							isset($_GET['chkFlush']) &&
							isset($_GET['btnFlush'])
						)
						{
							WriteLog('Flush requested');
						}

						if (
							isset($_GET['chkOverthrow']) &&
							isset($_GET['btnOverthrow'])
							)
						{
							WriteLog('Overthrow requested');

							if (GetConfig('admin/allow_deop')) {
								if (time() - GetConfig('admin/admin_last_action') > 60) {
									WriteLog('Overthrow conditions met');

									//PutConfig('admin/admin_last_action', 0);
									file_put_contents('../config/admin/admin_last_action', 0); //#todo PutConfig()

									if (file_exists('../admin.key')) {
										unlink('../admin.key');
										WriteLog('Overthrow successful');

										$messageOverthrow = StoreServerMessage('Overthrow successful! Register to become operator.');

										$redirectUrl = '/settings.html?message=' . $messageOverthrow;
									} else {
										WriteLog('Overthrow already in effect: admin.key missing');

										$messageOverthrow = StoreServerMessage('Overthrow already happened! Register to become operator.</a>');
										$redirectUrl = '/settings.html?message=' . $messageOverthrow;
									}
								} else {
									WriteLog('Overthrow conditions not met, overthrow unsuccessful');

									$messageOverthrow = StoreServerMessage('Overthrow conditions not met, overthrow unsuccessful');
									$redirectUrl = '/settings.html?message=' . $messageOverthrow;
								}
							} else {
								WriteLog('Overthrow conditions not met');
							}
						}

						WriteLog('$html = file_get_contents($pathRel);');
						$html = file_get_contents($pathRel);
					} else {
						WriteLog('$path not found, using HandleNotFound(' . $path . ',' . $pathRel . ')');
						$html = HandleNotFound($path, $pathRel);
					}
				} else {
					// no $path
					WriteLog('$path not specified, using HandleNotFound()');
					$html = HandleNotFound($path, '');
				}
			} else {
				// #todo when does this actually happen?
				// smarter 404 handler
				WriteLog('smarter 404 handler... activate!');
				WriteLog('$path not found, using HandleNotFound()');
				$html = HandleNotFound($path, '');
			}
		} else {
			WriteLog('no $path specified in GET');
			$html = HandleNotFound($path, $pathRel);
		}

		if (GetConfig('html/clock')) {
			WriteLog('calling SetHtmlClock()');
			$html = SetHtmlClock($html);
		}

		if (isset($_GET['mode'])) {
			if ($_GET['mode'] == 'light') {
				$_GET['light'] = 1;
			}
		}

		if (isset($_GET['light'])) {
			// user is requesting to change light mode state

			$lightMode = $_GET['light'] ? 1 : 0; // normalize the request

			if (isset($_COOKIE['light'])) {
				// if there is a cookie, change its value if it's necessary

				if ($_COOKIE['light'] != $lightMode) {
					setcookie2('light', $lightMode);

					//$lightModeSetMessage = StoreServerMessage('Light mode has been set to ' . $lightMode);
					//$redirectUrl = '';
				}
			} else {
				// if there is no cookie set, set it
				
				setcookie2('light', $lightMode);
			}
		} else {
			// no requests for light mode change, check if there is a cookie
			
			if (isset($_COOKIE['light'])) {
				// cookie is set
				$lightMode = $_COOKIE['light'] ? 1 : 0;
			} else {
				// use light mode default from config
				$lightMode = GetConfig('admin/php/light_mode_default');
			}
		}

		if ($serverMessage) {
			// inject server message into html

			// base template for server message, not including js
			$serverMessageTemplate = GetTemplate('server_message.template');

			$colorHighlightAlert = GetThemeColor('highlight_alert');
			$serverMessageTemplate = str_replace('$colorHighlightAlert', $colorHighlightAlert, $serverMessageTemplate);

			// inject the message text itself.
			// no escaping, because it can contain html formatting
			$serverMessageTemplate = str_replace('$serverMessage', $serverMessage, $serverMessageTemplate);

			//$serverMessageTemplate = GetWindowTemplate('title', '', '', 'hi', 'ready');

			$messageInjected = 0;
			
			if (!$lightMode && isset($_GET['anchorto']) && $_GET['anchorto']) {
				// if there is an anchorto parameter, we will put the server message next to the anchor
				// unless we are in light mode, because then we want the message at the top of the page

				$anchorTo = $_GET['anchorto'];

				if (index($html, "<a name=$anchorTo>") > -1) {
					// same as below, same message applies
					$serverMessageTemplate = str_replace('<a href=#maincontent', '<a href="' . $path . '#' . $anchorTo . '"', $serverMessageTemplate);

					$replaceWhat = "<a name=$anchorTo>";
					$replaceWith = "<a name=$anchorTo>" . $serverMessageTemplate;
					$html = str_replace($replaceWhat, $replaceWith, $html);

					$messageInjected = 1;
				}
			}

			if (!$messageInjected) {
				// put the current file's path in the "OK" link for nojs browsers
				// this is a compromise, because it causes a page reload, which may be slow
				// the other option is to leave it as is, but the message will remain on
				// the page instead of disappearing, which doesn't look nearly as cool
				// perhaps to be conditional under html/cool_effects?
				$serverMessageTemplate = str_replace('<a href=#maincontent', '<a href="' . $path . '"', $serverMessageTemplate);

				// inject server message right after the body tag
				$replaceWhat = '(<body\s[^>]*>|<body>)'; // both with attributes or without
				$replaceWith = '$0' . $serverMessageTemplate; // the $0 is the original body tag, which we want to retain
				$html = preg_replace($replaceWhat, $replaceWith, $html);

				$messageInjected = 1;
			}

			if (GetConfig('admin/js/enable')) {
				//javascript stuff, if javascript is enabled

				// inject server_message.js for hiding the server message popup
				$html = InjectJs($html, array('server_message'), 'before', '</head>');

				// add onkeydown event to body tag, which responds to escape and spacebar keys
				// spacebar is added for qutebrowser's normal mode, which doesn't let esc through
				// known issue: if there's non-32 whitespace, this may not work right
				$replaceWhat = '<body ';
				$replaceWith = '<body onkeydown="if (event.keyCode && event.keyCode == 27) { if (window.bodyEscPress) { return bodyEscPress(); } }"';
				$html = str_replace($replaceWhat, $replaceWith . ' ', $html);
				$replaceWhat = '<body>';
				$html = str_replace($replaceWhat, $replaceWith . '>', $html);
			}
		}

		if ($redirectUrl) {
			// if we've come up with a place to redirect to, do it now
			header('Location: ' . $redirectUrl);
		}

		if ($path == '/profile.html') {
			// special handling for /profile.html
			WriteLog('route.php: /profile.html');

			// we need cookies
			include_once('cookie.php');

			$handle = ''; // will store our handle
			$fingerprint = ''; // will store our fingerprint

			if (isset($cookie) && $cookie) {
				$handle = 'Anonymous';
				$fingerprint = $cookie;

//				$html = str_replace('<span id=spanSignedInStatus></span>', '<span id=spanSignedInStatus class=beginner><p><b>Status: You are signed in</b></p></span>', $html);
				// #todo get this from template
				// #todo add the same logic to javascript frontend
			} else {
				$fingerprint = '(not signed in)';
				$handle = '(not signed in)';
			}

			$html = str_replace('<span id=lblHandle></span>', "<span id=lblHandle>$handle</span>", $html);
			$html = str_replace('<span id=lblFingerprint></span>', "<span id=lblFingerprint>$fingerprint</span>", $html);
		}

		if (function_exists('WriteLog') && GetConfig('admin/php/debug')) {
			$html = str_replace('</body>', '<p class=advanced>' . WriteLog(0) . '</p></body>', $html);
		}

		if (GetConfig('html/clock')) {
			$html = preg_replace('/id=txtClock value=\".+\"/', 'id=txtClock value="' . GetClockFormattedTime() . '"', $html);
		}

		if ($lightMode) {
			$html = StripComments($html);
			$html = StripWhitespace($html);
			$html = CleanBodyTag($html);
			$html = StripHeavyTags($html);

			$pathSelf = $_SERVER['REQUEST_URI'];
			if (! (strpos($pathSelf, '?') === false)) {
				$pathSelf = substr($pathSelf, 0, strpos($pathSelf, '?'));
			}

			$html = str_replace(
				'</body>',
				'<p>(Using site in lightweight mode. If you want, <a href="' . $pathSelf . '?light=0">switch to full mode</a>.)</p></body>',
				$html
			);
//
//			$html = str_replace(
//				'<main id=maincontent>',
//				'<p>(Using site in lightweight mode. If you want, <a href="' . $pathSelf . '?light=0">switch to full mode</a>.)</p><main id=maincontent>',
//				$html
//			);

			//#todo perhaps strip onclick, onkeypress, etc., and style
		}

		////////////////////////////
		print $html; // final output
		////////////////////////////
	}
} else {
	WriteLog('config/admin/php/route_enable = false');

	// this is a fallback, and shouldn't really be here
	// but it helps compensate for another bug

	//print "oh no! route_enable is false, but route.php was called!";
	if ($_GET['path']) {
		if (file_exists($path)) {
			$html = get_file_contents($path);
			print $html;
		}
	}
}

//
//if (isset($_GET['path']) && $_GET['path']) {
//	$path = $_GET['path'];
//	if ($path == '/') {
//		$path = '/index.html';
//	}
//	$filePath = '.' . $path;
//
//	if (file_exists($filePath)) {
//	// if it's an exact match for the file, return the file
//	// #todo make sure it's under the web root ;)
//
//		$html = file_get_contents('.' . $path);
//		print $html;
//	} else {
//		if (strpos($path, '?')) {
//			$qm = strpos($path, '?'); // position of question mark
//
//			$file = substr($path, 0, $qm);
//
//			if (file_exists('.' . $file)) {
//			// #todo make sure it's under the web root ;)
//				$html = file_get_contents('.' . $file);
//				$html = 'php' . $html;
//				print $html;
//			}
//
//		} else {
//			// if file like '/aa/bb/aabbcc...html
//			// it's an item
//			// look for it
//			// otherwise ...
//		}
//	}
//}

// #todo if any of the url matches [0-9a-fA-F]{32} or {16} ...
// ... check if html page exists
// ... ... if it does, return it and with appropriate expire headers too, which may be challenging
// ... ... maybe the redirector at the http server level should include "if file exists return it"
// ... do a lookup in the sqlite table for author and/or item
// ... ... if found, generate, return, and store html page
// ... ... otherwise, ??? 404 page?
//

//print 'hello world';
