		if (GetConfig('admin/token/cookie') && $detokenedMessage) {
			# look for cookies
			my @cookieLines = ($message =~ m/^(Cookie:\s)(.+)/mg);
			if (@cookieLines) {
				while (@cookieLines) {
					my $cookieToken = shift @cookieLines;
					my $cookieValue = shift @cookieLines;
					my $reconLine = $cookieToken . $cookieValue;

					if ($cookieToken && $cookieValue) {
						my %newTokenFound;
						$newTokenFound{'token'} = 'cookie';
						$newTokenFound{'cookie'} = $cookieValue;
						$newTokenFound{'recon'} = $reconLine;
						$newTokenFound{'message'} = "Cookie: $cookieValue";
						push(@tokensFound, \%newTokenFound);

						$detokenedMessage =~ s/$reconLine//;
					}
				}
			}
		}





		# SHA512: AccessLogHash
		if ($message && GetConfig('admin/token/sha512_hash')) {
			# #title token is enabled

			# looks for lines beginning with AccessLogHash: and text after
			# only these characters are currently allowed: a-z, A-Z, 0-9, _, and space.
			my @lines = ($message =~ m/^(SHA512)(\W+)(.+)$/mig); #todo format instead of .+
			# m = multi-line
			# s = multi-line
			# g = all instances
			# i = case-insensitive

			WriteLog('@lines = ' . scalar(@lines));

			if (@lines) { # means we found at least one line
				WriteLog('#SHA512 token found for ' . $fileHash);
				WriteLog('$message = ' . $message);

				#my $lineCount = @setTitleToLines / 3;
				while (@lines) {
					# loop through all found title: token lines
					my $token = shift @lines;
					my $space = shift @lines;
					my $value = shift @lines;

					chomp $token;
					chomp $space;
					chomp $value;
					$value = trim($value);

					my $reconLine; # reconciliation
					$reconLine = $token . $space . $value;

					WriteLog('IndexTextFile: SHA512 $reconLine = ' . $reconLine);

					if ($value) {
						$hasToken{'SHA512'} = 1;

						chomp $value;
						if ($hasParent) {
							# has parent(s), so add title to each parent
							foreach my $itemParent (@itemParents) {
								DBAddItemAttribute($itemParent, 'sha512_hash', $value, $addedTime, $fileHash);
								DBAddPageTouch('item', $itemParent);
							} # @itemParents
						} else {
							# no parents, ignore
							WriteLog('IndexTextFile: SHA512: Item has no parent, ignoring');
						}
					}

					$message =~ s/$reconLine/[SHA512]/;
					$detokenedMessage =~ s/$reconLine//;
				}
			}
		} # SHA512 token



							chomp $titleGiven;
							if ($hasParent) {
								# has parent(s), so add title to each parent
								foreach my $itemParent (@itemParents) {
									DBAddItemAttribute($itemParent, 'title', $titleGiven, $addedTime, $fileHash);

									DBAddVoteRecord($itemParent, $addedTime, 'hastitle');

									DBAddPageTouch('item', $itemParent);

									if (GetConfig('admin/index/make_primary_pages')) {
										#todo this may not be the right place for this?
										MakePage('item', $itemParent, 1);
									}
								}
							} else {
								# no parents, so set title to self

								WriteLog('Item has no parent, adding title to itself');

								DBAddVoteRecord($fileHash, $addedTime, 'hastitle');
								DBAddItemAttribute($fileHash, 'title', $titleGiven, $addedTime);
							}

							$message = str_replace($reconLine, '[Title: ' . $titleGiven . ']', $message);
						} else {
							$message = str_replace($reconLine, '[Title not applied, insufficient privileges]', $message);
						}
							chomp $titleGiven;
							if ($hasParent) {
								# has parent(s), so add title to each parent
								foreach my $itemParent (@itemParents) {
									DBAddItemAttribute($itemParent, 'title', $titleGiven, $addedTime, $fileHash);

									DBAddVoteRecord($itemParent, $addedTime, 'hastitle');

									DBAddPageTouch('item', $itemParent);

									if (GetConfig('admin/index/make_primary_pages')) {
										#todo this may not be the right place for this?
										MakePage('item', $itemParent, 1);
									}
								}
							} else {
								# no parents, so set title to self

								WriteLog('Item has no parent, adding title to itself');

								DBAddVoteRecord($fileHash, $addedTime, 'hastitle');
								DBAddItemAttribute($fileHash, 'title', $titleGiven, $addedTime);
							}

							$message = str_replace($reconLine, '[Title: ' . $titleGiven . ']', $message);
						} else {
							$message = str_replace($reconLine, '[Title not applied, insufficient privileges]', $message);
						}



		# title:
		if ($message && GetConfig('admin/token/title')) {
			# #title token is enabled

			# looks for lines beginning with title: and text after
			# only these characters are currently allowed: a-z, A-Z, 0-9, _, and space.
			my @setTitleToLines = ($message =~ m/^(title)(\W+)(.+)$/mig);
			# m = multi-line
			# s = multi-line
			# g = all instances
			# i = case-insensitive

			WriteLog('@setTitleToLines = ' . scalar(@setTitleToLines));

			if (@setTitleToLines) { # means we found at least one title: token;
				WriteLog('#title token found for ' . $fileHash);
				WriteLog('$message = ' . $message);

				#my $lineCount = @setTitleToLines / 3;
				while (@setTitleToLines) {
					# loop through all found title: token lines
					my $setTitleToToken = shift @setTitleToLines;
					my $titleSpace = shift @setTitleToLines;
					my $titleGiven = shift @setTitleToLines;

					chomp $setTitleToToken;
					chomp $titleSpace;
					chomp $titleGiven;
					$titleGiven = trim($titleGiven);

					my $reconLine;
					$reconLine = $setTitleToToken . $titleSpace . $titleGiven;
					WriteLog('title $reconLine = ' . $reconLine);

					if ($titleGiven) {
						$hasToken{'title'} = 1;

						# if (($authorHasTag{'admin'} == 1 || $authorHasTag{'title'} == 1)) {
						if (1) {
							chomp $titleGiven;
							if ($hasParent) {
								# has parent(s), so add title to each parent
								foreach my $itemParent (@itemParents) {
									DBAddItemAttribute($itemParent, 'title', $titleGiven, $addedTime, $fileHash);

									DBAddVoteRecord($itemParent, $addedTime, 'hastitle');

									DBAddPageTouch('item', $itemParent);

									if (GetConfig('admin/index/make_primary_pages')) {
										#todo this may not be the right place for this?
										MakePage('item', $itemParent, 1);
									}
								}
							} else {
								# no parents, so set title to self

								WriteLog('Item has no parent, adding title to itself');

								DBAddVoteRecord($fileHash, $addedTime, 'hastitle');
								DBAddItemAttribute($fileHash, 'title', $titleGiven, $addedTime);
							}

							$message = str_replace($reconLine, '[Title: ' . $titleGiven . ']', $message);
						} else {
							$message = str_replace($reconLine, '[Title not applied, insufficient privileges]', $message);
						}
					}
				}
			}
		} # title: token






		# title:
		if ($message && GetConfig('admin/token/title')) {
			# #title token is enabled

			# looks for lines beginning with title: and text after
			# only these characters are currently allowed: a-z, A-Z, 0-9, _, and space.
			my @setTitleToLines = ($message =~ m/^(title)(\W+)(.+)$/mig);
			# m = multi-line
			# s = multi-line
			# g = all instances
			# i = case-insensitive

			WriteLog('@setTitleToLines = ' . scalar(@setTitleToLines));

			if (@setTitleToLines) { # means we found at least one title: token;
				WriteLog('#title token found for ' . $fileHash);
				WriteLog('$message = ' . $message);

				#my $lineCount = @setTitleToLines / 3;
				while (@setTitleToLines) {
					# loop through all found title: token lines
					my $setTitleToToken = shift @setTitleToLines;
					my $titleSpace = shift @setTitleToLines;
					my $titleGiven = shift @setTitleToLines;

					chomp $setTitleToToken;
					chomp $titleSpace;
					chomp $titleGiven;
					$titleGiven = trim($titleGiven);

					my $reconLine;
					$reconLine = $setTitleToToken . $titleSpace . $titleGiven;
					WriteLog('title $reconLine = ' . $reconLine);

					if ($titleGiven) {
						$hasToken{'title'} = 1;

						# if (($authorHasTag{'admin'} == 1 || $authorHasTag{'title'} == 1)) {
						if (1) {
							chomp $titleGiven;
							if ($hasParent) {
								# has parent(s), so add title to each parent
								foreach my $itemParent (@itemParents) {
									DBAddItemAttribute($itemParent, 'title', $titleGiven, $addedTime, $fileHash);

									DBAddVoteRecord($itemParent, $addedTime, 'hastitle');

									DBAddPageTouch('item', $itemParent);

									if (GetConfig('admin/index/make_primary_pages')) {
										#todo this may not be the right place for this?
										MakePage('item', $itemParent, 1);
									}
								}
							} else {
								# no parents, so set title to self

								WriteLog('Item has no parent, adding title to itself');

								DBAddVoteRecord($fileHash, $addedTime, 'hastitle');
								DBAddItemAttribute($fileHash, 'title', $titleGiven, $addedTime);
							}

							$message = str_replace($reconLine, '[Title: ' . $titleGiven . ']', $message);
						} else {
							$message = str_replace($reconLine, '[Title not applied, insufficient privileges]', $message);
						}
					}
				}
			}
		} # title: token










		# SHA512: AccessLogHash
		if ($message && GetConfig('admin/token/sha512_hash')) {
			# #title token is enabled

			# looks for lines beginning with AccessLogHash: and text after
			# only these characters are currently allowed: a-z, A-Z, 0-9, _, and space.
			my @lines = ($message =~ m/^(SHA512)(\W+)(.+)$/mig); #todo format instead of .+
			# m = multi-line
			# s = multi-line
			# g = all instances
			# i = case-insensitive

			WriteLog('@lines = ' . scalar(@lines));

			if (@lines) { # means we found at least one line
				WriteLog('#SHA512 token found for ' . $fileHash);
				WriteLog('$message = ' . $message);

				#my $lineCount = @setTitleToLines / 3;
				while (@lines) {
					# loop through all found title: token lines
					my $token = shift @lines;
					my $space = shift @lines;
					my $value = shift @lines;

					chomp $token;
					chomp $space;
					chomp $value;
					$value = trim($value);

					my $reconLine; # reconciliation
					$reconLine = $token . $space . $value;

					WriteLog('IndexTextFile: SHA512 $reconLine = ' . $reconLine);

					if ($value) {
						$hasToken{'SHA512'} = 1;

						chomp $value;
						if ($hasParent) {
							# has parent(s), so add title to each parent
							foreach my $itemParent (@itemParents) {
								DBAddItemAttribute($itemParent, 'sha512_hash', $value, $addedTime, $fileHash);
								DBAddPageTouch('item', $itemParent);
							} # @itemParents
						} else {
							# no parents, ignore
							WriteLog('IndexTextFile: SHA512: Item has no parent, ignoring');
						}
					}

					$message =~ s/$reconLine/[SHA512]/;
					$detokenedMessage =~ s/$reconLine//;
				}
			}
		} # SHA512 token
		# title:
		if ($message && GetConfig('admin/token/title')) {
			# #title token is enabled

			# looks for lines beginning with title: and text after
			# only these characters are currently allowed: a-z, A-Z, 0-9, _, and space.
			my @setTitleToLines = ($message =~ m/^(title)(\W+)(.+)$/mig);
			# m = multi-line
			# s = multi-line
			# g = all instances
			# i = case-insensitive

			WriteLog('@setTitleToLines = ' . scalar(@setTitleToLines));

			if (@setTitleToLines) { # means we found at least one title: token;
				WriteLog('#title token found for ' . $fileHash);
				WriteLog('$message = ' . $message);

				#my $lineCount = @setTitleToLines / 3;
				while (@setTitleToLines) {
					# loop through all found title: token lines
					my $setTitleToToken = shift @setTitleToLines;
					my $titleSpace = shift @setTitleToLines;
					my $titleGiven = shift @setTitleToLines;

					chomp $setTitleToToken;
					chomp $titleSpace;
					chomp $titleGiven;
					$titleGiven = trim($titleGiven);

					my $reconLine;
					$reconLine = $setTitleToToken . $titleSpace . $titleGiven;
					WriteLog('title $reconLine = ' . $reconLine);

					if ($titleGiven) {
						$hasToken{'title'} = 1;

						# if (($authorHasTag{'admin'} == 1 || $authorHasTag{'title'} == 1)) {
						if (1) {
							chomp $titleGiven;
							if ($hasParent) {
								# has parent(s), so add title to each parent
								foreach my $itemParent (@itemParents) {
									DBAddItemAttribute($itemParent, 'title', $titleGiven, $addedTime, $fileHash);

									DBAddVoteRecord($itemParent, $addedTime, 'hastitle');

									DBAddPageTouch('item', $itemParent);

									if (GetConfig('admin/index/make_primary_pages')) {
										#todo this may not be the right place for this?
										MakePage('item', $itemParent, 1);
									}
								}
							} else {
								# no parents, so set title to self

								WriteLog('Item has no parent, adding title to itself');

								DBAddVoteRecord($fileHash, $addedTime, 'hastitle');
								DBAddItemAttribute($fileHash, 'title', $titleGiven, $addedTime);
							}

							$message = str_replace($reconLine, '[Title: ' . $titleGiven . ']', $message);
						} else {
							$message = str_replace($reconLine, '[Title not applied, insufficient privileges]', $message);
						}
					}
				}
			}
		} # title: token
